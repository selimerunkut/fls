{
  "address": "0x7845492d67fc67b562BC529c4d634A614098A5C7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "riskHubChainId_",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "riskHub_",
          "type": "address"
        },
        {
          "internalType": "contract IBridge",
          "name": "bridge_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "payToken_",
          "type": "address"
        },
        {
          "internalType": "contract IPriceOracle",
          "name": "priceOracle_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slotSize_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MathOverflowedMulDiv",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotImplemented",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_MARKUP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATOR_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARKET_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RISK_HUB_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SET_SLOT_SIZE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "contract IBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "computeAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISwapRouter.ExactInputParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "exactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct ISwapRouter.ExactInputSingleParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactInputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISwapRouter.ExactOutputParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "exactOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct ISwapRouter.ExactOutputSingleParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "exactOutputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidators",
      "outputs": [
        {
          "internalType": "contract ILiquidator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "BangDEX.SlotIndex",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minDiscount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discountDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fixedCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usedCapacity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "markup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payToken",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "riskHub",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "riskHubChainId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sendToRiskHub",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "contract ILiquidator",
          "name": "newLiquidator",
          "type": "address"
        }
      ],
      "name": "setLiquidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slotSize_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDiscount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discountDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fixedCost",
          "type": "uint256"
        }
      ],
      "name": "setMarketParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMarkup",
          "type": "uint256"
        }
      ],
      "name": "setMarkup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "priceOracle_",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSlotSize",
          "type": "uint256"
        }
      ],
      "name": "setSlotSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slotSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "uniswapV3SwapCallback",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xc3f765b6be25331404cbac1390d42723b664c5854f0c2fd78bb0fe4e4f8c078d",
  "receipt": {
    "to": null,
    "from": "0xF7b01b40305aF7b5bBc6a3344892dAb7c6Ce4905",
    "contractAddress": "0x7845492d67fc67b562BC529c4d634A614098A5C7",
    "transactionIndex": 1,
    "gasUsed": "1763012",
    "logsBloom": "0x
    "blockHash": "0x4e68de9c1de7dc57b4a05874765bbb4c9e991496ef2998f2ab3c11e1375b52ea",
    "transactionHash": "0xc3f765b6be25331404cbac1390d42723b664c5854f0c2fd78bb0fe4e4f8c078d",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 985414,
        "transactionHash": "0xc3f765b6be25331404cbac1390d42723b664c5854f0c2fd78bb0fe4e4f8c078d",
        "address": "0x7845492d67fc67b562BC529c4d634A614098A5C7",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f7b01b40305af7b5bbc6a3344892dab7c6ce4905",
          "0x000000000000000000000000f7b01b40305af7b5bbc6a3344892dab7c6ce4905"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x4e68de9c1de7dc57b4a05874765bbb4c9e991496ef2998f2ab3c11e1375b52ea"
      }
    ],
    "blockNumber": 985414,
    "cumulativeGasUsed": "1941122",
    "status": 1,
    "byzantium": true
  },
  "args": [
    167009,
    "0x9aA6E6f8FDb201ccdDeEF680b375f4d03dD06439",
    "0x0D187408bf43094D1aEB495451F07E605406F8d2",
    "0x0011E559da84dde3f841e22dc33F3adbF184D84A",
    "0xB1edA6D6DbBf9de2c2c4F0e92E6912a1Aa84587f",
    86400,
    "0xF7b01b40305aF7b5bBc6a3344892dAb7c6Ce4905"
  ],
  "numDeployments": 1,
  "solcInputHash": "61060eb6fb9a8ee51f4f9d8bf09ee0ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"riskHubChainId_\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"riskHub_\",\"type\":\"address\"},{\"internalType\":\"contract IBridge\",\"name\":\"bridge_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"payToken_\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotSize_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotImplemented\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_MARKUP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATOR_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RISK_HUB_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_SLOT_SIZE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contract IBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"computeAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactInputParams\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactOutputParams\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactOutputSingleParams\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidators\",\"outputs\":[{\"internalType\":\"contract ILiquidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"BangDEX.SlotIndex\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedCapacity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"markup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"riskHub\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"riskHubChainId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendToRiskHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract ILiquidator\",\"name\":\"newLiquidator\",\"type\":\"address\"}],\"name\":\"setLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotSize_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedCost\",\"type\":\"uint256\"}],\"name\":\"setMarketParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarkup\",\"type\":\"uint256\"}],\"name\":\"setMarkup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle_\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSlotSize\",\"type\":\"uint256\"}],\"name\":\"setSlotSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\"},\"returns\":{\"_0\":\"The amount of the received token\"}},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\"},\"returns\":{\"_0\":\"The amount of the input token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"_0\":\"The amount of the input token\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"BangDEX\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"This function is not implemented\"},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"This function is not implemented\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"This function is not implemented\"}},\"notice\":\"Contract following the interface of ISwapRouter that executes the swaps with the users in the different         chains, using a linear price curve based on the utilized capacity of each token for each slot.         Colaborates with liquidators that are the ones that later (probably asynchronously and cross-chain) will         liquidate the tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BangDEX.sol\":\"BangDEX\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/BangDEX.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ISwapRouter } from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { IPriceOracle } from \\\"./interfaces/IPriceOracle.sol\\\";\\nimport { ILiquidator } from \\\"./interfaces/ILiquidator.sol\\\";\\nimport { IBridge } from \\\"./interfaces/IBridge.sol\\\";\\nimport { IRiskHub } from \\\"./interfaces/IRiskHub.sol\\\";\\nimport { IBangDEX } from \\\"./interfaces/IBangDEX.sol\\\";\\n\\n/**\\n * @title BangDEX\\n * @notice Contract following the interface of ISwapRouter that executes the swaps with the users in the different\\n *         chains, using a linear price curve based on the utilized capacity of each token for each slot.\\n *\\n *         Colaborates with liquidators that are the ones that later (probably asynchronously and cross-chain) will\\n *         liquidate the tokens.\\n */\\ncontract BangDEX is ISwapRouter, AccessControl, IBangDEX {\\n  using SafeERC20 for IERC20Metadata;\\n  using Math for uint256;\\n\\n  bytes32 public constant SET_SLOT_SIZE_ROLE = keccak256(\\\"SET_SLOT_SIZE_ROLE\\\");\\n  bytes32 public constant MARKET_ADMIN_ROLE = keccak256(\\\"MARKET_ADMIN_ROLE\\\");\\n  bytes32 public constant ORACLE_ADMIN_ROLE = keccak256(\\\"ORACLE_ADMIN_ROLE\\\");\\n  // RISK_HUB_ROLE is the role that sends the message that were sent cross-chain from the RiskHub\\n  bytes32 public constant RISK_HUB_ROLE = keccak256(\\\"RISK_HUB_ROLE\\\");\\n  bytes32 public constant LIQUIDATOR_ADMIN_ROLE = keccak256(\\\"LIQUIDATOR_ADMIN_ROLE\\\");\\n  uint256 public constant WAD = 1e18;\\n  uint256 public constant DEFAULT_MARKUP = 1e18 + 2e16;  // 1.02%\\n\\n  address public immutable riskHub;\\n  uint64 public immutable riskHubChainId;\\n  IERC20Metadata public immutable payToken; // USDC or other token that will use to pay for the acquired tokens\\n  uint256 public slotSize; // Duration in seconds of the time slots\\n  uint256 public markup = DEFAULT_MARKUP;\\n\\n  struct MarketState {\\n    uint256 minDiscount; // in wad - Expressed as 1-d, so for 2% this should be 0.98 (simplifies math)\\n    uint256 discountDelta; // maxDiscount = minDiscount - discountDelta\\n    // Expressed as 1-d - in Wad\\n    uint256 fixedCost; // Fixed amount in USDC for each trade\\n    uint256 maxCapacity;\\n    uint256 usedCapacity;\\n  }\\n\\n  // Struct used to have\\n  type SlotIndex is uint256; // slotSize << 128 + block.timestamp / slotSize\\n\\n  // Token Address => Slot => MarketState\\n  mapping(IERC20Metadata => mapping(SlotIndex => MarketState)) public markets;\\n\\n  mapping(IERC20Metadata => ILiquidator) public liquidators;\\n\\n  IBridge public bridge;\\n  IPriceOracle public priceOracle;\\n\\n  error NotImplemented();\\n\\n  constructor(\\n    uint64 riskHubChainId_,\\n    address riskHub_,\\n    IBridge bridge_,\\n    IERC20Metadata payToken_,\\n    IPriceOracle priceOracle_,\\n    uint256 slotSize_,\\n    address admin\\n  ) {\\n    riskHub = riskHub_;\\n    riskHubChainId = riskHubChainId_;\\n    bridge = bridge_;\\n    payToken = payToken_;\\n    priceOracle = priceOracle_;\\n    slotSize = slotSize_;\\n    _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n  }\\n\\n  function _getSlotIndex(uint256 slotSize_, uint256 slot) internal pure returns (SlotIndex) {\\n    return SlotIndex.wrap(slotSize_ << (128 + slot));\\n  }\\n\\n  function _getMarket(IERC20Metadata token) internal view returns (MarketState storage ret) {\\n    ret = markets[token][_getSlotIndex(slotSize, block.timestamp / slotSize)];\\n  }\\n\\n  function getDiscount(MarketState storage market, uint256 amountToBuy) internal view returns (uint256 discount) {\\n    // Already fails if market doesn't exist (zero div), but a custom error would be better\\n    discount = market.minDiscount - market.discountDelta.mulDiv(\\n      (market.usedCapacity + amountToBuy).mulDiv(WAD, market.maxCapacity), WAD\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ISwapRouter\\n   */\\n  function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut) {\\n    // TODO: change to custom error\\n    require(msg.value == 0, \\\"Sorry, we don't support the native token yet\\\");\\n    require(params.recipient != address(0), \\\"Recipient cannot be zero address\\\");\\n    require(params.deadline >= block.timestamp, \\\"Deadline in the past\\\");\\n    require(params.amountIn > 0, \\\"amountIn cannot be zero\\\");\\n\\n    require(IERC20Metadata(params.tokenOut) == payToken, \\\"We can swap only against payToken\\\");\\n    ILiquidator liquidator = liquidators[IERC20Metadata(params.tokenIn)];\\n    require(address(liquidator) != address(0), \\\"The token is not supported\\\");\\n    MarketState storage market = _getMarket(IERC20Metadata(params.tokenIn));\\n    require(market.usedCapacity + params.amountIn <= market.maxCapacity, \\\"Capacity for this token exceeded\\\");\\n\\n    amountOut = computeAmountOut(IERC20Metadata(params.tokenIn), params.amountIn);\\n\\n    require(amountOut >= params.amountOutMinimum, \\\"The output amount is less minimum acceptable\\\");\\n    market.usedCapacity += params.amountIn;\\n\\n    payToken.safeTransfer(params.recipient, amountOut);\\n    IERC20Metadata(params.tokenIn).safeTransferFrom(msg.sender, address(liquidator), params.amountIn);\\n    // Apply the markup in the value sent to the liquidator\\n    liquidator.liquidate(params.tokenIn, params.amountIn, amountOut.mulDiv(markup, WAD));\\n    _notifyTradeToRiskHub(IERC20Metadata(params.tokenIn), params.amountIn, amountOut);\\n  }\\n\\n  function computeAmountOut(IERC20Metadata tokenIn, uint256 amountIn) public view returns (uint256 amountOut) {\\n    uint256 oraclePrice = priceOracle.getCurrentPrice(tokenIn, payToken);\\n\\n    MarketState storage market = _getMarket(tokenIn);\\n    uint256 discount = getDiscount(market, amountIn);\\n\\n    return amountIn.mulDiv(oraclePrice, WAD).mulDiv(discount, WAD) / (10 ** (18 - payToken.decimals())) - market.fixedCost;\\n  }\\n\\n  function _notifyTradeToRiskHub(IERC20Metadata tokenIn, uint256 amountIn, uint256 amountOut) internal {\\n    bytes memory message = abi.encodeWithSelector(\\n      IRiskHub.tradeFromDex.selector,\\n      block.chainid,\\n      block.timestamp,\\n      tokenIn,\\n      amountIn,\\n      amountOut\\n    );\\n    bridge.callCrossChain(riskHubChainId, riskHub, message);\\n  }\\n\\n  function sendToRiskHub(uint256 amount) external onlyRole(RISK_HUB_ROLE) {\\n    payToken.approve(address(bridge), amount);\\n    bridge.transferToken(payToken, riskHubChainId, riskHub, amount);\\n  }\\n\\n  /**\\n   * @inheritdoc ISwapRouter\\n   */\\n  function exactOutputSingle(ExactOutputSingleParams calldata) external payable returns (uint256) {\\n    // TODO - Can be implemented, just need a bit more of math...\\n    revert NotImplemented();\\n  }\\n\\n  function setPriceOracle(IPriceOracle priceOracle_) external onlyRole(ORACLE_ADMIN_ROLE) {\\n    priceOracle = priceOracle_;\\n    // TODO: emit event\\n  }\\n\\n  function setSlotSize(uint256 newSlotSize) external onlyRole(SET_SLOT_SIZE_ROLE) {\\n    slotSize = newSlotSize;\\n    // TODO: emit event\\n  }\\n\\n  function setMarkup(uint256 newMarkup) external onlyRole(SET_SLOT_SIZE_ROLE) {\\n    markup = newMarkup;\\n    // TODO: emit event\\n  }\\n\\n  function setLiquidator(IERC20Metadata token, ILiquidator newLiquidator) external onlyRole(LIQUIDATOR_ADMIN_ROLE) {\\n    liquidators[token] = newLiquidator;\\n    // TODO: emit event\\n  }\\n\\n  function setMarketParameters(\\n    IERC20Metadata token,\\n    uint256 slotSize_,\\n    uint256 slot,\\n    uint256 minDiscount,\\n    uint256 discountDelta,\\n    uint256 maxCapacity,\\n    uint256 fixedCost\\n  ) external onlyRole(MARKET_ADMIN_ROLE) {\\n    SlotIndex slotIndex = _getSlotIndex(slotSize_, slot);\\n    MarketState storage newState = markets[token][slotIndex];\\n    newState.minDiscount = minDiscount;\\n    newState.discountDelta = discountDelta;\\n    newState.maxCapacity = maxCapacity;\\n    newState.fixedCost = fixedCost;\\n    // usedCapacity remains unchanged. As zero if it's a new market, otherwise the previous value remains\\n    // TODO: emit event\\n  }\\n\\n  /**\\n   * @inheritdoc ISwapRouter\\n   * @notice This function is not implemented\\n   */\\n  function exactOutput(ExactOutputParams calldata) external payable returns (uint256) {\\n    revert NotImplemented();\\n  }\\n\\n  /**\\n   * @inheritdoc ISwapRouter\\n   * @notice This function is not implemented\\n   */\\n  function exactInput(ExactInputParams calldata) external payable returns (uint256) {\\n    revert NotImplemented();\\n  }\\n\\n  /**\\n   * @notice This function is not implemented\\n   */\\n  function uniswapV3SwapCallback(int256, int256, bytes calldata) external pure {\\n    revert NotImplemented();\\n  }\\n}\\n\",\"keccak256\":\"0x3bf15ff0f3f03c30ac06d5b28549216e025b8327915fdd82d7ce2ab796744725\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IBangDEX.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\ninterface IBangDEX {\\n  function sendToRiskHub(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf4b04688a1b7f5688fb94e2450821939676c9ce38c0fecfa7f1d38e5d964bdd3\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\nimport { ITransferBridge } from \\\"./ITransferBridge.sol\\\";\\nimport { IRemoteCallBridge } from \\\"./IRemoteCallBridge.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ninterface IBridge is IRemoteCallBridge, ITransferBridge {}\\n\",\"keccak256\":\"0x0fa265424a2bb831f86f109b3e56317d3f6c7c25b52493d24270bddc9f788bf2\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ILiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\ninterface ILiquidator {\\n  // The Liquidator is responsible for selling the asset to recover at least the debt (if possible)\\n  function liquidate(address asset, uint256 assetAmount, uint256 debtAmount) external;\\n}\\n\",\"keccak256\":\"0x385fb6514421ab06dacf7e349389c19065d0325da4937db7684db57d47a27e0a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @title IPriceOracle interface\\n * @dev Interface that returns the price of tokens\\n */\\ninterface IPriceOracle {\\n  /**\\n   * @dev Returns the amount of units of tokenOut that should be received for a uint of tokenIn\\n   *\\n   * Requirements:\\n   * - The underlying oracle(s) are functional. It NEVER returns zero.\\n   *\\n   * @return Returns the amount of units of tokenOut that should be received for a uint of tokenIn (in Wad)\\n   */\\n  function getCurrentPrice(IERC20Metadata tokenIn, IERC20Metadata tokenOut) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8345efe5c4c2ac8fe59d6303dd10587d0d063018edc8c1cce9e2d139277f2ccf\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IRemoteCallBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\ninterface IRemoteCallBridge {\\n  function callCrossChain(uint64 chainId, address target, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xe61a62cb48eaac9224c2c0467b69892390a90e86bfd8b504c7de5b4e7e52754c\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRiskHub.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IRiskHub {\\n  function tradeFromDex(\\n    uint64 chainId,\\n    uint40 timestamp,\\n    IERC20Metadata tokenIn,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf51259dc53c1160bffefe591dfa6ccbf97d294479470e7d55e3d272295ab7306\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITransferBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface ITransferBridge {\\n  function transferToken(IERC20Metadata token, uint64 chainId, address target, uint256 amount) external;\\n\\n  function transferTokenAndData(\\n    IERC20Metadata token,\\n    uint64 chainId,\\n    address target,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x57accdfe0768846f77ef2e16f01c7f1837b1da96b6ab373858ae001b5ef82d45\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60e0604052670e27c49886e6000060025534801561001c57600080fd5b50604051611f35380380611f3583398101604081905261003b91610164565b6001600160a01b038681166080526001600160401b03881660a052600580546001600160a01b03199081168884161790915585821660c0526006805490911691851691909117905560018290556100936000826100a0565b5050505050505050610202565b6000828152602081815260408083206001600160a01b038516845290915281205460ff16610142576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556100fa3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610146565b5060005b92915050565b6001600160a01b038116811461016157600080fd5b50565b600080600080600080600060e0888a03121561017f57600080fd5b87516001600160401b038116811461019657600080fd5b60208901519097506101a78161014c565b60408901519096506101b88161014c565b60608901519095506101c98161014c565b60808901519094506101da8161014c565b60a089015160c08a015191945092506101f28161014c565b8091505092959891949750929550565b60805160a05160c051611cbe610277600039600081816105c5015281816109fc01528181610c4a01528181610e2c01528181610eb6015281816110ab015261114701526000818161039701528181610ede015261155601526000818161063d01528181610f0e01526115780152611cbe6000f3fe6080604052600436106102045760003560e01c80638003a94f11610118578063c5a92656116100a0578063e78cea921161006f578063e78cea92146106d7578063f28c049814610618578063f90cdb36146106f7578063fa461e331461072d578063fc085e091461074d57600080fd5b8063c5a926561461065f578063d547741f14610675578063d6f0d39f14610695578063db3e2198146106c957600080fd5b806396336b30116100e757806396336b30146105b35780639cb16f8c146105e7578063a217fddf14610603578063c04b8d5914610618578063c276bf4a1461062b57600080fd5b80638003a94f1461051f5780638b9789c9146105535780638c2c359f1461057357806391d148541461059357600080fd5b8063353a98ed1161019b578063530e784f1161016a578063530e784f1461048d578063628a0cf8146104ad5780636a146024146104c35780636e2b3d0a146104df5780637abbc8bf146104ff57600080fd5b8063353a98ed146103f257806336568abe14610426578063414bf389146104465780634a6fce0d1461045957600080fd5b8063248a9ca3116101d7578063248a9ca31461031d5780632630c12f1461034d5780632753be04146103855780632f2ff15d146103d257600080fd5b806301ffc9a71461020957806305dfefa81461023e57806317b3bba7146102805780631f22bcf1146102fb575b600080fd5b34801561021557600080fd5b506102296102243660046117b8565b61076d565b60405190151581526020015b60405180910390f35b34801561024a57600080fd5b506102727f9ce59597c934dedd904171f26bf62ea86832059580bda1abc4da8223acaaa66481565b604051908152602001610235565b34801561028c57600080fd5b506102d361029b3660046117f7565b600360208181526000938452604080852090915291835291208054600182015460028301549383015460049093015491939092909185565b604080519586526020860194909452928401919091526060830152608082015260a001610235565b34801561030757600080fd5b5061031b610316366004611823565b6107a4565b005b34801561032957600080fd5b50610272610338366004611878565b60009081526020819052604090206001015490565b34801561035957600080fd5b5060065461036d906001600160a01b031681565b6040516001600160a01b039091168152602001610235565b34801561039157600080fd5b506103b97f000000000000000000000000000000000000000000000000000000000000000081565b60405167ffffffffffffffff9091168152602001610235565b3480156103de57600080fd5b5061031b6103ed366004611891565b61081e565b3480156103fe57600080fd5b506102727f35840b8c68fc75fd4730080ad6a253c59d8481203cb1e390bc8cf3404664ab6281565b34801561043257600080fd5b5061031b610441366004611891565b610849565b6102726104543660046118da565b610881565b34801561046557600080fd5b506102727f35b8a665c30bad4757300d2c2635e76c32d629f8b51d543b8cdef10fa9a4a56681565b34801561049957600080fd5b5061031b6104a83660046118f7565b610d5c565b3480156104b957600080fd5b5061027260015481565b3480156104cf57600080fd5b50610272670de0b6b3a764000081565b3480156104eb57600080fd5b5061031b6104fa366004611878565b610da9565b34801561050b57600080fd5b5061031b61051a366004611878565b610dd9565b34801561052b57600080fd5b506102727fc307c44629779eb8fc0b85f224c3d22f5876a6c84de0ee42d481eb7814f0d3a881565b34801561055f57600080fd5b5061031b61056e366004611878565b610f7e565b34801561057f57600080fd5b5061031b61058e366004611914565b610fae565b34801561059f57600080fd5b506102296105ae366004611891565b611007565b3480156105bf57600080fd5b5061036d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105f357600080fd5b50610272670e27c49886e6000081565b34801561060f57600080fd5b50610272600081565b610272610626366004611954565b611030565b34801561063757600080fd5b5061036d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561066b57600080fd5b5061027260025481565b34801561068157600080fd5b5061031b610690366004611891565b61104b565b3480156106a157600080fd5b506102727f3fb0aaa9e8051cfc6c234a5d843bed33910f70c647055f27247c10144c7552e181565b6102726106263660046118da565b3480156106e357600080fd5b5060055461036d906001600160a01b031681565b34801561070357600080fd5b5061036d6107123660046118f7565b6004602052600090815260409020546001600160a01b031681565b34801561073957600080fd5b5061031b610748366004611991565b611070565b34801561075957600080fd5b506102726107683660046117f7565b611089565b60006001600160e01b03198216637965db0b60e01b148061079e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b7f3fb0aaa9e8051cfc6c234a5d843bed33910f70c647055f27247c10144c7552e16107ce8161121a565b60006107da8888611227565b6001600160a01b0390991660009081526003602081815260408084209c84529b90529990209586555050600184019290925594820194909455600201929092555050565b6000828152602081905260409020600101546108398161121a565b610843838361123e565b50505050565b6001600160a01b03811633146108725760405163334bd91960e11b815260040160405180910390fd5b61087c82826112d0565b505050565b600034156108eb5760405162461bcd60e51b815260206004820152602c60248201527f536f7272792c20776520646f6e277420737570706f727420746865206e61746960448201526b1d99481d1bdad95b881e595d60a21b60648201526084015b60405180910390fd5b60006108fd60808401606085016118f7565b6001600160a01b0316036109535760405162461bcd60e51b815260206004820181905260248201527f526563697069656e742063616e6e6f74206265207a65726f206164647265737360448201526064016108e2565b428260800135101561099e5760405162461bcd60e51b8152602060048201526014602482015273111958591b1a5b99481a5b881d1a19481c185cdd60621b60448201526064016108e2565b60008260a00135116109f25760405162461bcd60e51b815260206004820152601760248201527f616d6f756e74496e2063616e6e6f74206265207a65726f00000000000000000060448201526064016108e2565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610a2c60408401602085016118f7565b6001600160a01b031614610a8c5760405162461bcd60e51b815260206004820152602160248201527f57652063616e2073776170206f6e6c7920616761696e737420706179546f6b656044820152603760f91b60648201526084016108e2565b6000600481610a9e60208601866118f7565b6001600160a01b03908116825260208201929092526040016000205416905080610b0a5760405162461bcd60e51b815260206004820152601a60248201527f54686520746f6b656e206973206e6f7420737570706f7274656400000000000060448201526064016108e2565b6000610b21610b1c60208601866118f7565b61133b565b905080600301548460a001358260040154610b3c9190611a2a565b1115610b8a5760405162461bcd60e51b815260206004820181905260248201527f436170616369747920666f72207468697320746f6b656e20657863656564656460448201526064016108e2565b610ba4610b9a60208601866118f7565b8560a00135611089565b92508360c00135831015610c0f5760405162461bcd60e51b815260206004820152602c60248201527f546865206f757470757420616d6f756e74206973206c657373206d696e696d7560448201526b6d2061636365707461626c6560a01b60648201526084016108e2565b8360a00135816004016000828254610c279190611a2a565b90915550610c719050610c4060808601606087016118f7565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169085611380565b610c99338360a0870135610c8860208901896118f7565b6001600160a01b03169291906113df565b6001600160a01b038216630710285c610cb560208701876118f7565b60025460a088013590610cd2908890670de0b6b3a7640000611418565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b158015610d2057600080fd5b505af1158015610d34573d6000803e3d6000fd5b50610d559250610d4a91505060208601866118f7565b8560a00135856114dd565b5050919050565b7fc307c44629779eb8fc0b85f224c3d22f5876a6c84de0ee42d481eb7814f0d3a8610d868161121a565b50600680546001600160a01b0319166001600160a01b0392909216919091179055565b7f35b8a665c30bad4757300d2c2635e76c32d629f8b51d543b8cdef10fa9a4a566610dd38161121a565b50600155565b7f35840b8c68fc75fd4730080ad6a253c59d8481203cb1e390bc8cf3404664ab62610e038161121a565b60055460405163095ea7b360e01b81526001600160a01b039182166004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b9190611a3d565b5060055460405163b093aee360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1660248301527f000000000000000000000000000000000000000000000000000000000000000081166044830152606482018590529091169063b093aee390608401600060405180830381600087803b158015610f6257600080fd5b505af1158015610f76573d6000803e3d6000fd5b505050505050565b7f35b8a665c30bad4757300d2c2635e76c32d629f8b51d543b8cdef10fa9a4a566610fa88161121a565b50600255565b7f9ce59597c934dedd904171f26bf62ea86832059580bda1abc4da8223acaaa664610fd88161121a565b506001600160a01b03918216600090815260046020526040902080546001600160a01b03191691909216179055565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600060405163d623472560e01b815260040160405180910390fd5b6000828152602081905260409020600101546110668161121a565b61084383836112d0565b60405163d623472560e01b815260040160405180910390fd5b60065460405163db16a55560e01b81526001600160a01b0384811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152600092839291169063db16a55590604401602060405180830381865afa1580156110ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111239190611a5f565b905060006111308561133b565b9050600061113e82866115da565b905081600201547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c79190611a78565b6111d2906012611a9b565b6111dd90600a611b9b565b6111fc83670de0b6b3a76400006111f58a8983611418565b9190611418565b6112069190611bc0565b6112109190611be2565b9695505050505050565b6112248133611620565b50565b6000611234826080611a2a565b9290921b92915050565b600061124a8383611007565b6112c8576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556112803390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161079e565b50600061079e565b60006112dc8383611007565b156112c8576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161079e565b6001600160a01b0381166000908152600360205260408120600154829061136b906113668142611bc0565b611227565b81526020019081526020016000209050919050565b6040516001600160a01b0383811660248301526044820183905261087c91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061165d565b6040516001600160a01b0384811660248301528381166044830152606482018390526108439186918216906323b872dd906084016113ad565b600083830281600019858709828110838203039150508060000361144f5783828161144557611445611baa565b04925050506114d6565b80841161146f5760405163227bc15360e01b815260040160405180910390fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b604080514660248201524260448201526001600160a01b0385811660648301526084820185905260a48083018590528351808403909101815260c490920183526020820180516001600160e01b03166301e8d07d60e21b1790526005549251634ac4ff2b60e01b815291921690634ac4ff2b906115a2907f0000000000000000000000000000000000000000000000000000000000000000907f0000000000000000000000000000000000000000000000000000000000000000908690600401611c19565b600060405180830381600087803b1580156115bc57600080fd5b505af11580156115d0573d6000803e3d6000fd5b5050505050505050565b6000611614611600670de0b6b3a764000085600301548587600401546111f59190611a2a565b600185015490670de0b6b3a7640000611418565b83546114d69190611be2565b61162a8282611007565b6116595760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016108e2565b5050565b60006116726001600160a01b038416836116c0565b905080516000141580156116975750808060200190518101906116959190611a3d565b155b1561087c57604051635274afe760e01b81526001600160a01b03841660048201526024016108e2565b60606114d68383600084600080856001600160a01b031684866040516116e69190611c6c565b60006040518083038185875af1925050503d8060008114611723576040519150601f19603f3d011682016040523d82523d6000602084013e611728565b606091505b5091509150611210868383606082611748576117438261178f565b6114d6565b815115801561175f57506001600160a01b0384163b155b1561178857604051639996b31560e01b81526001600160a01b03851660048201526024016108e2565b50806114d6565b80511561179f5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000602082840312156117ca57600080fd5b81356001600160e01b0319811681146114d657600080fd5b6001600160a01b038116811461122457600080fd5b6000806040838503121561180a57600080fd5b8235611815816117e2565b946020939093013593505050565b600080600080600080600060e0888a03121561183e57600080fd5b8735611849816117e2565b9960208901359950604089013598606081013598506080810135975060a0810135965060c00135945092505050565b60006020828403121561188a57600080fd5b5035919050565b600080604083850312156118a457600080fd5b8235915060208301356118b6816117e2565b809150509250929050565b600061010082840312156118d457600080fd5b50919050565b600061010082840312156118ed57600080fd5b6114d683836118c1565b60006020828403121561190957600080fd5b81356114d6816117e2565b6000806040838503121561192757600080fd5b8235611932816117e2565b915060208301356118b6816117e2565b600060a082840312156118d457600080fd5b60006020828403121561196657600080fd5b813567ffffffffffffffff81111561197d57600080fd5b61198984828501611942565b949350505050565b600080600080606085870312156119a757600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156119cc57600080fd5b8501601f810187136119dd57600080fd5b803567ffffffffffffffff8111156119f457600080fd5b876020828401011115611a0657600080fd5b949793965060200194505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561079e5761079e611a14565b600060208284031215611a4f57600080fd5b815180151581146114d657600080fd5b600060208284031215611a7157600080fd5b5051919050565b600060208284031215611a8a57600080fd5b815160ff811681146114d657600080fd5b60ff828116828216039081111561079e5761079e611a14565b6001815b6001841115611aef57808504811115611ad357611ad3611a14565b6001841615611ae157908102905b60019390931c928002611ab8565b935093915050565b600082611b065750600161079e565b81611b135750600061079e565b8160018114611b295760028114611b3357611b4f565b600191505061079e565b60ff841115611b4457611b44611a14565b50506001821b61079e565b5060208310610133831016604e8410600b8410161715611b72575081810a61079e565b611b7f6000198484611ab4565b8060001904821115611b9357611b93611a14565b029392505050565b60006114d660ff841683611af7565b634e487b7160e01b600052601260045260246000fd5b600082611bdd57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561079e5761079e611a14565b60005b83811015611c10578181015183820152602001611bf8565b50506000910152565b67ffffffffffffffff8416815260018060a01b03831660208201526060604082015260008251806060840152611c56816080850160208701611bf5565b601f01601f191691909101608001949350505050565b60008251611c7e818460208701611bf5565b919091019291505056fea26469706673582212203424c6ec62e40f134586856b81f700748d3cca3cc8ab2a784b42bcba0c693c9b64736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436106102045760003560e01c80638003a94f11610118578063c5a92656116100a0578063e78cea921161006f578063e78cea92146106d7578063f28c049814610618578063f90cdb36146106f7578063fa461e331461072d578063fc085e091461074d57600080fd5b8063c5a926561461065f578063d547741f14610675578063d6f0d39f14610695578063db3e2198146106c957600080fd5b806396336b30116100e757806396336b30146105b35780639cb16f8c146105e7578063a217fddf14610603578063c04b8d5914610618578063c276bf4a1461062b57600080fd5b80638003a94f1461051f5780638b9789c9146105535780638c2c359f1461057357806391d148541461059357600080fd5b8063353a98ed1161019b578063530e784f1161016a578063530e784f1461048d578063628a0cf8146104ad5780636a146024146104c35780636e2b3d0a146104df5780637abbc8bf146104ff57600080fd5b8063353a98ed146103f257806336568abe14610426578063414bf389146104465780634a6fce0d1461045957600080fd5b8063248a9ca3116101d7578063248a9ca31461031d5780632630c12f1461034d5780632753be04146103855780632f2ff15d146103d257600080fd5b806301ffc9a71461020957806305dfefa81461023e57806317b3bba7146102805780631f22bcf1146102fb575b600080fd5b34801561021557600080fd5b506102296102243660046117b8565b61076d565b60405190151581526020015b60405180910390f35b34801561024a57600080fd5b506102727f9ce59597c934dedd904171f26bf62ea86832059580bda1abc4da8223acaaa66481565b604051908152602001610235565b34801561028c57600080fd5b506102d361029b3660046117f7565b600360208181526000938452604080852090915291835291208054600182015460028301549383015460049093015491939092909185565b604080519586526020860194909452928401919091526060830152608082015260a001610235565b34801561030757600080fd5b5061031b610316366004611823565b6107a4565b005b34801561032957600080fd5b50610272610338366004611878565b60009081526020819052604090206001015490565b34801561035957600080fd5b5060065461036d906001600160a01b031681565b6040516001600160a01b039091168152602001610235565b34801561039157600080fd5b506103b97f000000000000000000000000000000000000000000000000000000000000000081565b60405167ffffffffffffffff9091168152602001610235565b3480156103de57600080fd5b5061031b6103ed366004611891565b61081e565b3480156103fe57600080fd5b506102727f35840b8c68fc75fd4730080ad6a253c59d8481203cb1e390bc8cf3404664ab6281565b34801561043257600080fd5b5061031b610441366004611891565b610849565b6102726104543660046118da565b610881565b34801561046557600080fd5b506102727f35b8a665c30bad4757300d2c2635e76c32d629f8b51d543b8cdef10fa9a4a56681565b34801561049957600080fd5b5061031b6104a83660046118f7565b610d5c565b3480156104b957600080fd5b5061027260015481565b3480156104cf57600080fd5b50610272670de0b6b3a764000081565b3480156104eb57600080fd5b5061031b6104fa366004611878565b610da9565b34801561050b57600080fd5b5061031b61051a366004611878565b610dd9565b34801561052b57600080fd5b506102727fc307c44629779eb8fc0b85f224c3d22f5876a6c84de0ee42d481eb7814f0d3a881565b34801561055f57600080fd5b5061031b61056e366004611878565b610f7e565b34801561057f57600080fd5b5061031b61058e366004611914565b610fae565b34801561059f57600080fd5b506102296105ae366004611891565b611007565b3480156105bf57600080fd5b5061036d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105f357600080fd5b50610272670e27c49886e6000081565b34801561060f57600080fd5b50610272600081565b610272610626366004611954565b611030565b34801561063757600080fd5b5061036d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561066b57600080fd5b5061027260025481565b34801561068157600080fd5b5061031b610690366004611891565b61104b565b3480156106a157600080fd5b506102727f3fb0aaa9e8051cfc6c234a5d843bed33910f70c647055f27247c10144c7552e181565b6102726106263660046118da565b3480156106e357600080fd5b5060055461036d906001600160a01b031681565b34801561070357600080fd5b5061036d6107123660046118f7565b6004602052600090815260409020546001600160a01b031681565b34801561073957600080fd5b5061031b610748366004611991565b611070565b34801561075957600080fd5b506102726107683660046117f7565b611089565b60006001600160e01b03198216637965db0b60e01b148061079e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b7f3fb0aaa9e8051cfc6c234a5d843bed33910f70c647055f27247c10144c7552e16107ce8161121a565b60006107da8888611227565b6001600160a01b0390991660009081526003602081815260408084209c84529b90529990209586555050600184019290925594820194909455600201929092555050565b6000828152602081905260409020600101546108398161121a565b610843838361123e565b50505050565b6001600160a01b03811633146108725760405163334bd91960e11b815260040160405180910390fd5b61087c82826112d0565b505050565b600034156108eb5760405162461bcd60e51b815260206004820152602c60248201527f536f7272792c20776520646f6e277420737570706f727420746865206e61746960448201526b1d99481d1bdad95b881e595d60a21b60648201526084015b60405180910390fd5b60006108fd60808401606085016118f7565b6001600160a01b0316036109535760405162461bcd60e51b815260206004820181905260248201527f526563697069656e742063616e6e6f74206265207a65726f206164647265737360448201526064016108e2565b428260800135101561099e5760405162461bcd60e51b8152602060048201526014602482015273111958591b1a5b99481a5b881d1a19481c185cdd60621b60448201526064016108e2565b60008260a00135116109f25760405162461bcd60e51b815260206004820152601760248201527f616d6f756e74496e2063616e6e6f74206265207a65726f00000000000000000060448201526064016108e2565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610a2c60408401602085016118f7565b6001600160a01b031614610a8c5760405162461bcd60e51b815260206004820152602160248201527f57652063616e2073776170206f6e6c7920616761696e737420706179546f6b656044820152603760f91b60648201526084016108e2565b6000600481610a9e60208601866118f7565b6001600160a01b03908116825260208201929092526040016000205416905080610b0a5760405162461bcd60e51b815260206004820152601a60248201527f54686520746f6b656e206973206e6f7420737570706f7274656400000000000060448201526064016108e2565b6000610b21610b1c60208601866118f7565b61133b565b905080600301548460a001358260040154610b3c9190611a2a565b1115610b8a5760405162461bcd60e51b815260206004820181905260248201527f436170616369747920666f72207468697320746f6b656e20657863656564656460448201526064016108e2565b610ba4610b9a60208601866118f7565b8560a00135611089565b92508360c00135831015610c0f5760405162461bcd60e51b815260206004820152602c60248201527f546865206f757470757420616d6f756e74206973206c657373206d696e696d7560448201526b6d2061636365707461626c6560a01b60648201526084016108e2565b8360a00135816004016000828254610c279190611a2a565b90915550610c719050610c4060808601606087016118f7565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169085611380565b610c99338360a0870135610c8860208901896118f7565b6001600160a01b03169291906113df565b6001600160a01b038216630710285c610cb560208701876118f7565b60025460a088013590610cd2908890670de0b6b3a7640000611418565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b158015610d2057600080fd5b505af1158015610d34573d6000803e3d6000fd5b50610d559250610d4a91505060208601866118f7565b8560a00135856114dd565b5050919050565b7fc307c44629779eb8fc0b85f224c3d22f5876a6c84de0ee42d481eb7814f0d3a8610d868161121a565b50600680546001600160a01b0319166001600160a01b0392909216919091179055565b7f35b8a665c30bad4757300d2c2635e76c32d629f8b51d543b8cdef10fa9a4a566610dd38161121a565b50600155565b7f35840b8c68fc75fd4730080ad6a253c59d8481203cb1e390bc8cf3404664ab62610e038161121a565b60055460405163095ea7b360e01b81526001600160a01b039182166004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b9190611a3d565b5060055460405163b093aee360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1660248301527f000000000000000000000000000000000000000000000000000000000000000081166044830152606482018590529091169063b093aee390608401600060405180830381600087803b158015610f6257600080fd5b505af1158015610f76573d6000803e3d6000fd5b505050505050565b7f35b8a665c30bad4757300d2c2635e76c32d629f8b51d543b8cdef10fa9a4a566610fa88161121a565b50600255565b7f9ce59597c934dedd904171f26bf62ea86832059580bda1abc4da8223acaaa664610fd88161121a565b506001600160a01b03918216600090815260046020526040902080546001600160a01b03191691909216179055565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600060405163d623472560e01b815260040160405180910390fd5b6000828152602081905260409020600101546110668161121a565b61084383836112d0565b60405163d623472560e01b815260040160405180910390fd5b60065460405163db16a55560e01b81526001600160a01b0384811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152600092839291169063db16a55590604401602060405180830381865afa1580156110ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111239190611a5f565b905060006111308561133b565b9050600061113e82866115da565b905081600201547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c79190611a78565b6111d2906012611a9b565b6111dd90600a611b9b565b6111fc83670de0b6b3a76400006111f58a8983611418565b9190611418565b6112069190611bc0565b6112109190611be2565b9695505050505050565b6112248133611620565b50565b6000611234826080611a2a565b9290921b92915050565b600061124a8383611007565b6112c8576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556112803390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161079e565b50600061079e565b60006112dc8383611007565b156112c8576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161079e565b6001600160a01b0381166000908152600360205260408120600154829061136b906113668142611bc0565b611227565b81526020019081526020016000209050919050565b6040516001600160a01b0383811660248301526044820183905261087c91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061165d565b6040516001600160a01b0384811660248301528381166044830152606482018390526108439186918216906323b872dd906084016113ad565b600083830281600019858709828110838203039150508060000361144f5783828161144557611445611baa565b04925050506114d6565b80841161146f5760405163227bc15360e01b815260040160405180910390fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b604080514660248201524260448201526001600160a01b0385811660648301526084820185905260a48083018590528351808403909101815260c490920183526020820180516001600160e01b03166301e8d07d60e21b1790526005549251634ac4ff2b60e01b815291921690634ac4ff2b906115a2907f0000000000000000000000000000000000000000000000000000000000000000907f0000000000000000000000000000000000000000000000000000000000000000908690600401611c19565b600060405180830381600087803b1580156115bc57600080fd5b505af11580156115d0573d6000803e3d6000fd5b5050505050505050565b6000611614611600670de0b6b3a764000085600301548587600401546111f59190611a2a565b600185015490670de0b6b3a7640000611418565b83546114d69190611be2565b61162a8282611007565b6116595760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016108e2565b5050565b60006116726001600160a01b038416836116c0565b905080516000141580156116975750808060200190518101906116959190611a3d565b155b1561087c57604051635274afe760e01b81526001600160a01b03841660048201526024016108e2565b60606114d68383600084600080856001600160a01b031684866040516116e69190611c6c565b60006040518083038185875af1925050503d8060008114611723576040519150601f19603f3d011682016040523d82523d6000602084013e611728565b606091505b5091509150611210868383606082611748576117438261178f565b6114d6565b815115801561175f57506001600160a01b0384163b155b1561178857604051639996b31560e01b81526001600160a01b03851660048201526024016108e2565b50806114d6565b80511561179f5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000602082840312156117ca57600080fd5b81356001600160e01b0319811681146114d657600080fd5b6001600160a01b038116811461122457600080fd5b6000806040838503121561180a57600080fd5b8235611815816117e2565b946020939093013593505050565b600080600080600080600060e0888a03121561183e57600080fd5b8735611849816117e2565b9960208901359950604089013598606081013598506080810135975060a0810135965060c00135945092505050565b60006020828403121561188a57600080fd5b5035919050565b600080604083850312156118a457600080fd5b8235915060208301356118b6816117e2565b809150509250929050565b600061010082840312156118d457600080fd5b50919050565b600061010082840312156118ed57600080fd5b6114d683836118c1565b60006020828403121561190957600080fd5b81356114d6816117e2565b6000806040838503121561192757600080fd5b8235611932816117e2565b915060208301356118b6816117e2565b600060a082840312156118d457600080fd5b60006020828403121561196657600080fd5b813567ffffffffffffffff81111561197d57600080fd5b61198984828501611942565b949350505050565b600080600080606085870312156119a757600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156119cc57600080fd5b8501601f810187136119dd57600080fd5b803567ffffffffffffffff8111156119f457600080fd5b876020828401011115611a0657600080fd5b949793965060200194505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561079e5761079e611a14565b600060208284031215611a4f57600080fd5b815180151581146114d657600080fd5b600060208284031215611a7157600080fd5b5051919050565b600060208284031215611a8a57600080fd5b815160ff811681146114d657600080fd5b60ff828116828216039081111561079e5761079e611a14565b6001815b6001841115611aef57808504811115611ad357611ad3611a14565b6001841615611ae157908102905b60019390931c928002611ab8565b935093915050565b600082611b065750600161079e565b81611b135750600061079e565b8160018114611b295760028114611b3357611b4f565b600191505061079e565b60ff841115611b4457611b44611a14565b50506001821b61079e565b5060208310610133831016604e8410600b8410161715611b72575081810a61079e565b611b7f6000198484611ab4565b8060001904821115611b9357611b93611a14565b029392505050565b60006114d660ff841683611af7565b634e487b7160e01b600052601260045260246000fd5b600082611bdd57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561079e5761079e611a14565b60005b83811015611c10578181015183820152602001611bf8565b50506000910152565b67ffffffffffffffff8416815260018060a01b03831660208201526060604082015260008251806060840152611c56816080850160208701611bf5565b601f01601f191691909101608001949350505050565b60008251611c7e818460208701611bf5565b919091019291505056fea26469706673582212203424c6ec62e40f134586856b81f700748d3cca3cc8ab2a784b42bcba0c693c9b64736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "MathOverflowedMulDiv()": [
        {
          "details": "Muldiv operation overflow."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "exactInput((bytes,address,uint256,uint256,uint256))": {
        "params": {
          "params": "The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"
        },
        "returns": {
          "_0": "The amount of the received token"
        }
      },
      "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
        "params": {
          "params": "The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"
        },
        "returns": {
          "amountOut": "The amount of the received token"
        }
      },
      "exactOutput((bytes,address,uint256,uint256,uint256))": {
        "params": {
          "params": "The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"
        },
        "returns": {
          "_0": "The amount of the input token"
        }
      },
      "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
        "params": {
          "params": "The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"
        },
        "returns": {
          "_0": "The amount of the input token"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "BangDEX",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "exactInput((bytes,address,uint256,uint256,uint256))": {
        "notice": "This function is not implemented"
      },
      "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
        "notice": "Swaps `amountIn` of one token for as much as possible of another token"
      },
      "exactOutput((bytes,address,uint256,uint256,uint256))": {
        "notice": "This function is not implemented"
      },
      "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
        "notice": "Swaps as little as possible of one token for `amountOut` of another token"
      },
      "uniswapV3SwapCallback(int256,int256,bytes)": {
        "notice": "This function is not implemented"
      }
    },
    "notice": "Contract following the interface of ISwapRouter that executes the swaps with the users in the different         chains, using a linear price curve based on the utilized capacity of each token for each slot.         Colaborates with liquidators that are the ones that later (probably asynchronously and cross-chain) will         liquidate the tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4361,
        "contract": "contracts/BangDEX.sol:BangDEX",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4356_storage)"
      },
      {
        "astId": 9498,
        "contract": "contracts/BangDEX.sol:BangDEX",
        "label": "slotSize",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9501,
        "contract": "contracts/BangDEX.sol:BangDEX",
        "label": "markup",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9523,
        "contract": "contracts/BangDEX.sol:BangDEX",
        "label": "markets",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_contract(IERC20Metadata)5703,t_mapping(t_userDefinedValueType(SlotIndex)9514,t_struct(MarketState)9512_storage))"
      },
      {
        "astId": 9529,
        "contract": "contracts/BangDEX.sol:BangDEX",
        "label": "liquidators",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(IERC20Metadata)5703,t_contract(ILiquidator)11777)"
      },
      {
        "astId": 9532,
        "contract": "contracts/BangDEX.sol:BangDEX",
        "label": "bridge",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IBridge)11765"
      },
      {
        "astId": 9535,
        "contract": "contracts/BangDEX.sol:BangDEX",
        "label": "priceOracle",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IPriceOracle)11795"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBridge)11765": {
        "encoding": "inplace",
        "label": "contract IBridge",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)5703": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(ILiquidator)11777": {
        "encoding": "inplace",
        "label": "contract ILiquidator",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)11795": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4356_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4356_storage"
      },
      "t_mapping(t_contract(IERC20Metadata)5703,t_contract(ILiquidator)11777)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Metadata)5703",
        "label": "mapping(contract IERC20Metadata => contract ILiquidator)",
        "numberOfBytes": "32",
        "value": "t_contract(ILiquidator)11777"
      },
      "t_mapping(t_contract(IERC20Metadata)5703,t_mapping(t_userDefinedValueType(SlotIndex)9514,t_struct(MarketState)9512_storage))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Metadata)5703",
        "label": "mapping(contract IERC20Metadata => mapping(BangDEX.SlotIndex => struct BangDEX.MarketState))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_userDefinedValueType(SlotIndex)9514,t_struct(MarketState)9512_storage)"
      },
      "t_mapping(t_userDefinedValueType(SlotIndex)9514,t_struct(MarketState)9512_storage)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(SlotIndex)9514",
        "label": "mapping(BangDEX.SlotIndex => struct BangDEX.MarketState)",
        "numberOfBytes": "32",
        "value": "t_struct(MarketState)9512_storage"
      },
      "t_struct(MarketState)9512_storage": {
        "encoding": "inplace",
        "label": "struct BangDEX.MarketState",
        "members": [
          {
            "astId": 9503,
            "contract": "contracts/BangDEX.sol:BangDEX",
            "label": "minDiscount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9505,
            "contract": "contracts/BangDEX.sol:BangDEX",
            "label": "discountDelta",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9507,
            "contract": "contracts/BangDEX.sol:BangDEX",
            "label": "fixedCost",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9509,
            "contract": "contracts/BangDEX.sol:BangDEX",
            "label": "maxCapacity",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9511,
            "contract": "contracts/BangDEX.sol:BangDEX",
            "label": "usedCapacity",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)4356_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4353,
            "contract": "contracts/BangDEX.sol:BangDEX",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4355,
            "contract": "contracts/BangDEX.sol:BangDEX",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(SlotIndex)9514": {
        "encoding": "inplace",
        "label": "BangDEX.SlotIndex",
        "numberOfBytes": "32"
      }
    }
  }
}