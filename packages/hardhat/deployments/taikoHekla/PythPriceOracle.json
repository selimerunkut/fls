{
  "address": "0xB1edA6D6DbBf9de2c2c4F0e92E6912a1Aa84587f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pythContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "feedId",
          "type": "bytes32"
        }
      ],
      "name": "FeedAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "age",
              "type": "uint256"
            }
          ],
          "internalType": "struct PythPriceOracle.PythPriceFeed",
          "name": "priceFeed",
          "type": "tuple"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "addFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "getCurrentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pyth",
      "outputs": [
        {
          "internalType": "contract IPyth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "tokenPairPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "tokenPairPriceFeed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "age",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "priceUpdate",
          "type": "bytes[]"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "updatePrice",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa3d2ab012dba677b8e3823d02629e6750abd3cc85efdcdfba9eded5b09fdbc49",
  "receipt": {
    "to": null,
    "from": "0xF7b01b40305aF7b5bBc6a3344892dAb7c6Ce4905",
    "contractAddress": "0xB1edA6D6DbBf9de2c2c4F0e92E6912a1Aa84587f",
    "transactionIndex": 1,
    "gasUsed": "810865",
    "logsBloom": "0x
    "blockHash": "0x060ffa50ac5183fc382275315e61789393f90f335444c66de44f4c310e2929ba",
    "transactionHash": "0xa3d2ab012dba677b8e3823d02629e6750abd3cc85efdcdfba9eded5b09fdbc49",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 985412,
        "transactionHash": "0xa3d2ab012dba677b8e3823d02629e6750abd3cc85efdcdfba9eded5b09fdbc49",
        "address": "0xB1edA6D6DbBf9de2c2c4F0e92E6912a1Aa84587f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f7b01b40305af7b5bbc6a3344892dab7c6ce4905"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x060ffa50ac5183fc382275315e61789393f90f335444c66de44f4c310e2929ba"
      }
    ],
    "blockNumber": 985412,
    "cumulativeGasUsed": "988975",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF7b01b40305aF7b5bBc6a3344892dAb7c6Ce4905",
    "0x2880aB155794e7179c9eE2e38200202908C17B43"
  ],
  "numDeployments": 1,
  "solcInputHash": "61060eb6fb9a8ee51f4f9d8bf09ee0ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pythContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"feedId\",\"type\":\"bytes32\"}],\"name\":\"FeedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"internalType\":\"struct PythPriceOracle.PythPriceFeed\",\"name\":\"priceFeed\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"addFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyth\",\"outputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"tokenPairPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"tokenPairPriceFeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"priceUpdate\",\"type\":\"bytes[]\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"getCurrentPrice(address,address)\":{\"details\":\"Returns the amount of units of tokenOut that should be received for a uint of tokenIn Requirements: - The underlying oracle(s) are functional. It NEVER returns zero.\",\"returns\":{\"_0\":\"Returns the amount of units of tokenOut that should be received for a uint of tokenIn (in Wad)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract assumes that the tokenOut is a token that it's pegged with the USD dollar (1 tokenOut = 1 dollar)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/PythPriceOracle.sol\":\"PythPriceOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5d3e5de9eadfa1f8a892eb2e95bbebd3e4b8c8ada5b76f104d383fea518fa688\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0x217532ece69b8e472a6260b740c34aebfb5a299bbfed6392cf0458ed368be7ab\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n}\\n\",\"keccak256\":\"0x7ca8e03315d4516d6833c425a52c43e8cacf2077492074d2d36ae5c17899c9c8\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @title IPriceOracle interface\\n * @dev Interface that returns the price of tokens\\n */\\ninterface IPriceOracle {\\n  /**\\n   * @dev Returns the amount of units of tokenOut that should be received for a uint of tokenIn\\n   *\\n   * Requirements:\\n   * - The underlying oracle(s) are functional. It NEVER returns zero.\\n   *\\n   * @return Returns the amount of units of tokenOut that should be received for a uint of tokenIn (in Wad)\\n   */\\n  function getCurrentPrice(IERC20Metadata tokenIn, IERC20Metadata tokenOut) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8345efe5c4c2ac8fe59d6303dd10587d0d063018edc8c1cce9e2d139277f2ccf\",\"license\":\"Apache-2.0\"},\"contracts/oracles/PythPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\nimport \\\"../interfaces/IPriceOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * This contract assumes that the tokenOut is a token that\\n * it's pegged with the USD dollar (1 tokenOut = 1 dollar)\\n */\\ncontract PythPriceOracle is IPriceOracle, Ownable2Step {\\n  struct PythPriceFeed {\\n    bytes32 id;\\n    uint256 age;\\n  }\\n\\n  IPyth public pyth;\\n  mapping(IERC20Metadata tokenIn => mapping(IERC20Metadata tokenOut => PythPriceFeed feed)) public tokenPairPriceFeed;\\n  mapping(IERC20Metadata tokenIn => mapping(IERC20Metadata tokenOut => int256 price)) public tokenPairPrice;\\n\\n  constructor(address owner, address pythContract) Ownable(owner) {\\n    pyth = IPyth(pythContract);\\n  }\\n\\n  // define an event, to make a list on withdrawing\\n  event Withdraw(address indexed to, uint256 amount);\\n\\n  // define a event to make a list of adding price source\\n  event FeedAdded(address indexed tokenIn, address indexed tokenOut, bytes32 indexed feedId);\\n\\n  function getCurrentPrice(IERC20Metadata tokenIn, IERC20Metadata tokenOut) public view returns (uint256) {\\n    uint256 price = uint256(tokenPairPrice[tokenIn][tokenOut]);\\n    if (price == 0) {\\n      // TODO: Throw error\\n      return 0;\\n    }\\n\\n    // TODO: We should check when was this updated\\n    return price;\\n  }\\n\\n  // TODO: Check what happens if anyone can update this function\\n  function updatePrice(bytes[] calldata priceUpdate, IERC20Metadata tokenIn, IERC20Metadata tokenOut) external payable {\\n    PythPriceFeed memory feed = tokenPairPriceFeed[tokenIn][tokenOut];\\n    // TODO: Add custom errors\\n    // TODO: Check if the price corresponds to the feed\\n    //    require(feed.id == bytes32(priceUpdate[0]), \\\"Wrong feed\\\");\\n    // Submit a priceUpdate to the Pyth contract to update the on-chain price.\\n    // Updating the price requires paying the fee returned by getUpdateFee.\\n    // WARNING: These lines are required to ensure the getPriceNoOlderThan call below succeeds.\\n    // If you remove them, transactions may fail with \\\"0x19abf40e\\\" error.\\n    uint fee = pyth.getUpdateFee(priceUpdate);\\n    pyth.updatePriceFeeds{ value: fee }(priceUpdate);\\n\\n    // Read the current price from a price feed if it is less than 60 seconds old.\\n    // Each price feed (e.g., ETH/USD) is identified by a price feed ID.\\n    // The complete list of feed IDs is available at https://pyth.network/developers/price-feed-ids\\n    PythStructs.Price memory price = pyth.getPriceNoOlderThan(feed.id, feed.age);\\n    // TODO: Do we care about the other stuff?\\n    tokenPairPrice[tokenIn][tokenOut] = _transformPriceTo18Decimals(price.price, price.expo);\\n  }\\n\\n  function withdraw() external onlyOwner {\\n    // Withdraw the balance of the contract\\n\\n    //to acquire the balance of this address\\n    uint256 balance = address(this).balance;\\n    //false or true\\n    require(balance > 0, \\\"No balance to withdraw\\\");\\n\\n    //Emit event\\n    emit Withdraw(owner(), balance);\\n\\n    //implement the withdraw\\n    payable(owner()).transfer(address(this).balance);\\n  }\\n\\n  function addFeed(\\n    PythPriceFeed calldata priceFeed,\\n    IERC20Metadata tokenIn,\\n    IERC20Metadata tokenOut\\n  ) external onlyOwner {\\n    // confirm the validaty\\n    require(priceFeed.id != bytes32(0), \\\"this feed is not work\\\");\\n\\n    tokenPairPriceFeed[tokenIn][tokenOut] = PythPriceFeed({ id: priceFeed.id, age: priceFeed.age });\\n\\n    // Emit event\\n    emit FeedAdded(address(tokenIn), address(tokenOut), priceFeed.id);\\n  }\\n\\n  // TODO: Check\\n  function _transformPriceTo18Decimals(int64 price, int32 expo) private pure returns (int256) {\\n    // Convert expo + 18 to uint256 for exponentiation\\n    int256 factor = int256(10) ** uint256(int256(expo + 18));\\n\\n    // Multiply the price by the factor, ensuring the result is in int256\\n    return int256(price) * factor;\\n  }\\n\\n  // Receive ether to pay to the pyth oracle\\n  receive() external payable {}\\n}\\n\",\"keccak256\":\"0x102496ccbaf40dc14ae33e6432eadb8381a8a1767fbe3becaadc446469668b85\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610e11380380610e1183398101604081905261002f91610116565b816001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100678161008e565b50600280546001600160a01b0319166001600160a01b039290921691909117905550610149565b600180546001600160a01b03191690556100a7816100aa565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461011157600080fd5b919050565b6000806040838503121561012957600080fd5b610132836100fa565b9150610140602084016100fa565b90509250929050565b610cb9806101586000396000f3fe6080604052600436106100ab5760003560e01c8063d936434611610064578063d9364346146101a3578063db16a555146101e9578063e30c397814610209578063e8587e7414610227578063f2fde38b1461023a578063f98d06f01461025a57600080fd5b80630cf93820146100b757806334d8061d146101105780633ccfd60b14610132578063715018a61461014757806379ba50971461015c5780638da5cb5b1461017157600080fd5b366100b257005b600080fd5b3480156100c357600080fd5b506100f66100d23660046107e7565b60036020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152015b60405180910390f35b34801561011c57600080fd5b5061013061012b366004610820565b61027a565b005b34801561013e57600080fd5b50610130610348565b34801561015357600080fd5b50610130610423565b34801561016857600080fd5b50610130610437565b34801561017d57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610107565b3480156101af57600080fd5b506101db6101be3660046107e7565b600460209081526000928352604080842090915290825290205481565b604051908152602001610107565b3480156101f557600080fd5b506101db6102043660046107e7565b61047b565b34801561021557600080fd5b506001546001600160a01b031661018b565b610130610235366004610871565b6104bd565b34801561024657600080fd5b5061013061025536600461090b565b610697565b34801561026657600080fd5b5060025461018b906001600160a01b031681565b610282610708565b82356102cd5760405162461bcd60e51b8152602060048201526015602482015274746869732066656564206973206e6f7420776f726b60581b60448201526064015b60405180910390fd5b60408051808201825284358082526020808701358184019081526001600160a01b038088166000818152600385528781209289168082529290945286842095518655915160019095019490945593519193917f5fdb06ac298dd1a16e656eed2e855b323ac20139b9f7bdc0f5a7433be4068b029190a4505050565b610350610708565b47806103975760405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b60448201526064016102c4565b6000546001600160a01b03166001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364826040516103dd91815260200190565b60405180910390a2600080546040516001600160a01b03909116914780156108fc02929091818181858888f1935050505015801561041f573d6000803e3d6000fd5b5050565b61042b610708565b6104356000610735565b565b60015433906001600160a01b0316811461046f5760405163118cdaa760e01b81526001600160a01b03821660048201526024016102c4565b61047881610735565b50565b6001600160a01b0380831660009081526004602090815260408083209385168352929052908120548082036104b45760009150506104b7565b90505b92915050565b6001600160a01b03808316600090815260036020908152604080832085851684528252808320815180830183528154815260019091015492810192909252600254905163d47eed4560e01b81529193169063d47eed45906105249089908990600401610951565b602060405180830381865afa158015610541573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056591906109f4565b600254604051631df3cbc560e31b81529192506001600160a01b03169063ef9e5e2890839061059a908a908a90600401610951565b6000604051808303818588803b1580156105b357600080fd5b505af11580156105c7573d6000803e3d6000fd5b50506002548551602087015160405163052571af60e51b8152600096506001600160a01b03909316945063a4ae35e0935061060d92600401918252602082015260400190565b608060405180830381865afa15801561062a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064e9190610a3c565b90506106628160000151826040015161074e565b6001600160a01b0395861660009081526004602090815260408083209790981682529590955294909320939093555050505050565b61069f610708565b600180546001600160a01b0383166001600160a01b031990911681179091556106d06000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000546001600160a01b031633146104355760405163118cdaa760e01b81523360048201526024016102c4565b600180546001600160a01b031916905561047881610782565b60008061075c836012610ae5565b61076a9060030b600a610c40565b905061077a81600786900b610c53565b949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461047857600080fd5b600080604083850312156107fa57600080fd5b8235610805816107d2565b91506020830135610815816107d2565b809150509250929050565b6000806000838503608081121561083657600080fd5b604081121561084457600080fd5b508392506040840135610856816107d2565b91506060840135610866816107d2565b809150509250925092565b6000806000806060858703121561088757600080fd5b843567ffffffffffffffff81111561089e57600080fd5b8501601f810187136108af57600080fd5b803567ffffffffffffffff8111156108c657600080fd5b8760208260051b84010111156108db57600080fd5b6020918201955093508501356108f0816107d2565b91506040850135610900816107d2565b939692955090935050565b60006020828403121561091d57600080fd5b81356104b4816107d2565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020808252810182905260006040600584901b830181019083018583601e1936839003015b878210156109e757868503603f19018452823581811261099557600080fd5b890160208101903567ffffffffffffffff8111156109b257600080fd5b8036038213156109c157600080fd5b6109cc878284610928565b96505050602083019250602084019350600182019150610976565b5092979650505050505050565b600060208284031215610a0657600080fd5b5051919050565b805167ffffffffffffffff81168114610a2557600080fd5b919050565b8051600381900b8114610a2557600080fd5b60006080828403128015610a4f57600080fd5b600090506040516080810181811067ffffffffffffffff82111715610a8257634e487b7160e01b83526041600452602483fd5b6040528351600781900b8114610a96578283fd5b8152610aa460208501610a0d565b6020820152610ab560408501610a2a565b604082015260609384015193810193909352509092915050565b634e487b7160e01b600052601160045260246000fd5b600381810b9083900b01637fffffff8113637fffffff19821217156104b7576104b7610acf565b80825b6001851115610b4657808604811115610b2a57610b2a610acf565b6001851615610b3857908102905b60019490941c938002610b0f565b94509492505050565b6000828015610b655760018114610b6f57610b78565b60019150506104b7565b829150506104b7565b5081610b86575060006104b7565b50600160008213808214610b9f578015610bbe57610bd8565b6001600160ff1b03839004831115610bb957610bb9610acf565b610bd8565b6001600160ff1b03839005831215610bd857610bd8610acf565b5080831615610be45750805b610bfd6001600160ff1b03600185901c84800284610b0c565b600082136001600160ff1b0382900483111615610c1c57610c1c610acf565b60008212600160ff1b82900583121615610c3857610c38610acf565b029392505050565b6000610c4c8383610b4f565b9392505050565b80820260008212600160ff1b84141615610c6f57610c6f610acf565b81810583148215176104b7576104b7610acf56fea26469706673582212203ddae14f4c6288b1451fc48645a1faf4f0d5c273cd3db951aadb98a9c3a4e5f064736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436106100ab5760003560e01c8063d936434611610064578063d9364346146101a3578063db16a555146101e9578063e30c397814610209578063e8587e7414610227578063f2fde38b1461023a578063f98d06f01461025a57600080fd5b80630cf93820146100b757806334d8061d146101105780633ccfd60b14610132578063715018a61461014757806379ba50971461015c5780638da5cb5b1461017157600080fd5b366100b257005b600080fd5b3480156100c357600080fd5b506100f66100d23660046107e7565b60036020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152015b60405180910390f35b34801561011c57600080fd5b5061013061012b366004610820565b61027a565b005b34801561013e57600080fd5b50610130610348565b34801561015357600080fd5b50610130610423565b34801561016857600080fd5b50610130610437565b34801561017d57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610107565b3480156101af57600080fd5b506101db6101be3660046107e7565b600460209081526000928352604080842090915290825290205481565b604051908152602001610107565b3480156101f557600080fd5b506101db6102043660046107e7565b61047b565b34801561021557600080fd5b506001546001600160a01b031661018b565b610130610235366004610871565b6104bd565b34801561024657600080fd5b5061013061025536600461090b565b610697565b34801561026657600080fd5b5060025461018b906001600160a01b031681565b610282610708565b82356102cd5760405162461bcd60e51b8152602060048201526015602482015274746869732066656564206973206e6f7420776f726b60581b60448201526064015b60405180910390fd5b60408051808201825284358082526020808701358184019081526001600160a01b038088166000818152600385528781209289168082529290945286842095518655915160019095019490945593519193917f5fdb06ac298dd1a16e656eed2e855b323ac20139b9f7bdc0f5a7433be4068b029190a4505050565b610350610708565b47806103975760405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b60448201526064016102c4565b6000546001600160a01b03166001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364826040516103dd91815260200190565b60405180910390a2600080546040516001600160a01b03909116914780156108fc02929091818181858888f1935050505015801561041f573d6000803e3d6000fd5b5050565b61042b610708565b6104356000610735565b565b60015433906001600160a01b0316811461046f5760405163118cdaa760e01b81526001600160a01b03821660048201526024016102c4565b61047881610735565b50565b6001600160a01b0380831660009081526004602090815260408083209385168352929052908120548082036104b45760009150506104b7565b90505b92915050565b6001600160a01b03808316600090815260036020908152604080832085851684528252808320815180830183528154815260019091015492810192909252600254905163d47eed4560e01b81529193169063d47eed45906105249089908990600401610951565b602060405180830381865afa158015610541573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056591906109f4565b600254604051631df3cbc560e31b81529192506001600160a01b03169063ef9e5e2890839061059a908a908a90600401610951565b6000604051808303818588803b1580156105b357600080fd5b505af11580156105c7573d6000803e3d6000fd5b50506002548551602087015160405163052571af60e51b8152600096506001600160a01b03909316945063a4ae35e0935061060d92600401918252602082015260400190565b608060405180830381865afa15801561062a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064e9190610a3c565b90506106628160000151826040015161074e565b6001600160a01b0395861660009081526004602090815260408083209790981682529590955294909320939093555050505050565b61069f610708565b600180546001600160a01b0383166001600160a01b031990911681179091556106d06000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000546001600160a01b031633146104355760405163118cdaa760e01b81523360048201526024016102c4565b600180546001600160a01b031916905561047881610782565b60008061075c836012610ae5565b61076a9060030b600a610c40565b905061077a81600786900b610c53565b949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461047857600080fd5b600080604083850312156107fa57600080fd5b8235610805816107d2565b91506020830135610815816107d2565b809150509250929050565b6000806000838503608081121561083657600080fd5b604081121561084457600080fd5b508392506040840135610856816107d2565b91506060840135610866816107d2565b809150509250925092565b6000806000806060858703121561088757600080fd5b843567ffffffffffffffff81111561089e57600080fd5b8501601f810187136108af57600080fd5b803567ffffffffffffffff8111156108c657600080fd5b8760208260051b84010111156108db57600080fd5b6020918201955093508501356108f0816107d2565b91506040850135610900816107d2565b939692955090935050565b60006020828403121561091d57600080fd5b81356104b4816107d2565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020808252810182905260006040600584901b830181019083018583601e1936839003015b878210156109e757868503603f19018452823581811261099557600080fd5b890160208101903567ffffffffffffffff8111156109b257600080fd5b8036038213156109c157600080fd5b6109cc878284610928565b96505050602083019250602084019350600182019150610976565b5092979650505050505050565b600060208284031215610a0657600080fd5b5051919050565b805167ffffffffffffffff81168114610a2557600080fd5b919050565b8051600381900b8114610a2557600080fd5b60006080828403128015610a4f57600080fd5b600090506040516080810181811067ffffffffffffffff82111715610a8257634e487b7160e01b83526041600452602483fd5b6040528351600781900b8114610a96578283fd5b8152610aa460208501610a0d565b6020820152610ab560408501610a2a565b604082015260609384015193810193909352509092915050565b634e487b7160e01b600052601160045260246000fd5b600381810b9083900b01637fffffff8113637fffffff19821217156104b7576104b7610acf565b80825b6001851115610b4657808604811115610b2a57610b2a610acf565b6001851615610b3857908102905b60019490941c938002610b0f565b94509492505050565b6000828015610b655760018114610b6f57610b78565b60019150506104b7565b829150506104b7565b5081610b86575060006104b7565b50600160008213808214610b9f578015610bbe57610bd8565b6001600160ff1b03839004831115610bb957610bb9610acf565b610bd8565b6001600160ff1b03839005831215610bd857610bd8610acf565b5080831615610be45750805b610bfd6001600160ff1b03600185901c84800284610b0c565b600082136001600160ff1b0382900483111615610c1c57610c1c610acf565b60008212600160ff1b82900583121615610c3857610c38610acf565b029392505050565b6000610c4c8383610b4f565b9392505050565b80820260008212600160ff1b84141615610c6f57610c6f610acf565b81810583148215176104b7576104b7610acf56fea26469706673582212203ddae14f4c6288b1451fc48645a1faf4f0d5c273cd3db951aadb98a9c3a4e5f064736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "getCurrentPrice(address,address)": {
        "details": "Returns the amount of units of tokenOut that should be received for a uint of tokenIn Requirements: - The underlying oracle(s) are functional. It NEVER returns zero.",
        "returns": {
          "_0": "Returns the amount of units of tokenOut that should be received for a uint of tokenIn (in Wad)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract assumes that the tokenOut is a token that it's pegged with the USD dollar (1 tokenOut = 1 dollar)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4722,
        "contract": "contracts/oracles/PythPriceOracle.sol:PythPriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4870,
        "contract": "contracts/oracles/PythPriceOracle.sol:PythPriceOracle",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12336,
        "contract": "contracts/oracles/PythPriceOracle.sol:PythPriceOracle",
        "label": "pyth",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPyth)9270"
      },
      {
        "astId": 12345,
        "contract": "contracts/oracles/PythPriceOracle.sol:PythPriceOracle",
        "label": "tokenPairPriceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_contract(IERC20Metadata)5703,t_mapping(t_contract(IERC20Metadata)5703,t_struct(PythPriceFeed)12333_storage))"
      },
      {
        "astId": 12353,
        "contract": "contracts/oracles/PythPriceOracle.sol:PythPriceOracle",
        "label": "tokenPairPrice",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(IERC20Metadata)5703,t_mapping(t_contract(IERC20Metadata)5703,t_int256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Metadata)5703": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(IPyth)9270": {
        "encoding": "inplace",
        "label": "contract IPyth",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_contract(IERC20Metadata)5703,t_int256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Metadata)5703",
        "label": "mapping(contract IERC20Metadata => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_contract(IERC20Metadata)5703,t_mapping(t_contract(IERC20Metadata)5703,t_int256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Metadata)5703",
        "label": "mapping(contract IERC20Metadata => mapping(contract IERC20Metadata => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20Metadata)5703,t_int256)"
      },
      "t_mapping(t_contract(IERC20Metadata)5703,t_mapping(t_contract(IERC20Metadata)5703,t_struct(PythPriceFeed)12333_storage))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Metadata)5703",
        "label": "mapping(contract IERC20Metadata => mapping(contract IERC20Metadata => struct PythPriceOracle.PythPriceFeed))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20Metadata)5703,t_struct(PythPriceFeed)12333_storage)"
      },
      "t_mapping(t_contract(IERC20Metadata)5703,t_struct(PythPriceFeed)12333_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Metadata)5703",
        "label": "mapping(contract IERC20Metadata => struct PythPriceOracle.PythPriceFeed)",
        "numberOfBytes": "32",
        "value": "t_struct(PythPriceFeed)12333_storage"
      },
      "t_struct(PythPriceFeed)12333_storage": {
        "encoding": "inplace",
        "label": "struct PythPriceOracle.PythPriceFeed",
        "members": [
          {
            "astId": 12330,
            "contract": "contracts/oracles/PythPriceOracle.sol:PythPriceOracle",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 12332,
            "contract": "contracts/oracles/PythPriceOracle.sol:PythPriceOracle",
            "label": "age",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}