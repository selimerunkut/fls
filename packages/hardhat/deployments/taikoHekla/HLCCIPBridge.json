{
  "address": "0x0D187408bf43094D1aEB495451F07E605406F8d2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IRouterClient",
          "name": "ccipRouter_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "linkToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "contract IInterchainAccountRouter",
          "name": "_interchainAccountRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        }
      ],
      "name": "NoGasLimitOnDestinationChain",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        }
      ],
      "name": "NoReceiverOnDestinationChain",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calculatedFees",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotImplemented",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CHAIN_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "callCrossChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ccipRouter",
      "outputs": [
        {
          "internalType": "contract IRouterClient",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "chains",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destination",
          "type": "uint32"
        }
      ],
      "name": "getRemoteInterchainAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interchainAccountRouter",
      "outputs": [
        {
          "internalType": "contract IInterchainAccountRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "linkToken",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit_",
          "type": "uint256"
        }
      ],
      "name": "setTargetChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "transferTokenAndData",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5408f44d1d413fb37a4402e922e7ea9cfe82838432fb875027abdbc1738018ca",
  "receipt": {
    "to": null,
    "from": "0xF7b01b40305aF7b5bBc6a3344892dAb7c6Ce4905",
    "contractAddress": "0x0D187408bf43094D1aEB495451F07E605406F8d2",
    "transactionIndex": 1,
    "gasUsed": "1363155",
    "logsBloom": "0x
    "blockHash": "0xf6405f0d29a9ef977f143dedd52f078ac75cd9838431235ed77d5311eb5711b4",
    "transactionHash": "0x5408f44d1d413fb37a4402e922e7ea9cfe82838432fb875027abdbc1738018ca",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 985411,
        "transactionHash": "0x5408f44d1d413fb37a4402e922e7ea9cfe82838432fb875027abdbc1738018ca",
        "address": "0x0D187408bf43094D1aEB495451F07E605406F8d2",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f7b01b40305af7b5bbc6a3344892dab7c6ce4905",
          "0x000000000000000000000000f7b01b40305af7b5bbc6a3344892dab7c6ce4905"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xf6405f0d29a9ef977f143dedd52f078ac75cd9838431235ed77d5311eb5711b4"
      }
    ],
    "blockNumber": 985411,
    "cumulativeGasUsed": "1541265",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2a9C5afB0d0e4BAb2BCdaE109EC4b0c4Be15a165",
    "0xb1D4538B4571d411F07960EF2838Ce337FE1E80E",
    "0xF7b01b40305aF7b5bBc6a3344892dAb7c6Ce4905",
    "0x90EeE71703246Ad01CA1138DEC7ee13687eFa67e"
  ],
  "numDeployments": 1,
  "solcInputHash": "61060eb6fb9a8ee51f4f9d8bf09ee0ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRouterClient\",\"name\":\"ccipRouter_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"linkToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contract IInterchainAccountRouter\",\"name\":\"_interchainAccountRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"NoGasLimitOnDestinationChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"NoReceiverOnDestinationChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calculatedFees\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotImplemented\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAIN_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callCrossChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ccipRouter\",\"outputs\":[{\"internalType\":\"contract IRouterClient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"chains\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"}],\"name\":\"getRemoteInterchainAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interchainAccountRouter\",\"outputs\":[{\"internalType\":\"contract IInterchainAccountRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit_\",\"type\":\"uint256\"}],\"name\":\"setTargetChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"transferTokenAndData\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridges/HLCCIPBridge.sol\":\"HLCCIPBridge\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param destChainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 destChainSelector) external view returns (bool supported);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x176bc6a1bec19d76464566d4becb68946e4c53b779e2019b34f95be4fee571f6\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV2)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV2\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V2_TAG = 0x181dcf10;\\n\\n  /// @param gasLimit: gas limit for the callback on the destination chain.\\n  /// @param allowOutOfOrderExecution: if true, it indicates that the message can be executed in any order relative to other messages from the same sender.\\n  /// This value's default varies by chain. On some chains, a particular value is enforced, meaning if the expected value\\n  /// is not set, the message request will revert.\\n  struct EVMExtraArgsV2 {\\n    uint256 gasLimit;\\n    bool allowOutOfOrderExecution;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV2 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V2_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0xa1ce70adec733c80b230084b425a50caa852a99f17a7e43e38a96a975f11ce88\",\"license\":\"MIT\"},\"@hyperlane-xyz/core/contracts/libs/TypeCasts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\nlibrary TypeCasts {\\n    // alignment preserving cast\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n\\n    // alignment preserving cast\\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\\n        require(\\n            uint256(_buf) <= uint256(type(uint160).max),\\n            \\\"TypeCasts: bytes32ToAddress overflow\\\"\\n        );\\n        return address(uint160(uint256(_buf)));\\n    }\\n}\\n\",\"keccak256\":\"0xa4329f368c22062ccc725593c5c552796ce923cf66191cb9681f4f17fea8631f\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/middleware/libs/Call.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {TypeCasts} from \\\"../../libs/TypeCasts.sol\\\";\\n\\nlibrary CallLib {\\n    struct StaticCall {\\n        // supporting non EVM targets\\n        bytes32 to;\\n        bytes data;\\n    }\\n\\n    struct Call {\\n        // supporting non EVM targets\\n        bytes32 to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    struct StaticCallWithCallback {\\n        StaticCall _call;\\n        bytes callback;\\n    }\\n\\n    function call(\\n        Call memory _call\\n    ) internal returns (bytes memory returnData) {\\n        return\\n            Address.functionCallWithValue(\\n                TypeCasts.bytes32ToAddress(_call.to),\\n                _call.data,\\n                _call.value\\n            );\\n    }\\n\\n    function staticcall(\\n        StaticCall memory _call\\n    ) private view returns (bytes memory) {\\n        return\\n            Address.functionStaticCall(\\n                TypeCasts.bytes32ToAddress(_call.to),\\n                _call.data\\n            );\\n    }\\n\\n    function staticcall(\\n        StaticCallWithCallback memory _call\\n    ) internal view returns (bytes memory callback) {\\n        return bytes.concat(_call.callback, staticcall(_call._call));\\n    }\\n\\n    function multicall(Call[] memory calls) internal {\\n        uint256 i = 0;\\n        uint256 len = calls.length;\\n        while (i < len) {\\n            call(calls[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function multistaticcall(\\n        StaticCallWithCallback[] memory _calls\\n    ) internal view returns (bytes[] memory) {\\n        uint256 i = 0;\\n        uint256 len = _calls.length;\\n        bytes[] memory callbacks = new bytes[](len);\\n        while (i < len) {\\n            callbacks[i] = staticcall(_calls[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return callbacks;\\n    }\\n\\n    function multicallto(address to, bytes[] memory calls) internal {\\n        uint256 i = 0;\\n        uint256 len = calls.length;\\n        while (i < len) {\\n            Address.functionCall(to, calls[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function build(\\n        bytes32 to,\\n        bytes memory data\\n    ) internal pure returns (StaticCall memory) {\\n        return StaticCall(to, data);\\n    }\\n\\n    function build(\\n        address to,\\n        bytes memory data\\n    ) internal pure returns (StaticCall memory) {\\n        return build(TypeCasts.addressToBytes32(to), data);\\n    }\\n\\n    function build(\\n        bytes32 to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal pure returns (Call memory) {\\n        return Call(to, value, data);\\n    }\\n\\n    function build(\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal pure returns (Call memory) {\\n        return Call(TypeCasts.addressToBytes32(to), value, data);\\n    }\\n\\n    function build(\\n        bytes32 to,\\n        bytes memory data,\\n        bytes memory callback\\n    ) internal pure returns (StaticCallWithCallback memory) {\\n        return StaticCallWithCallback(build(to, data), callback);\\n    }\\n\\n    function build(\\n        address to,\\n        bytes memory data,\\n        bytes memory callback\\n    ) internal pure returns (StaticCallWithCallback memory) {\\n        return StaticCallWithCallback(build(to, data), callback);\\n    }\\n}\\n\",\"keccak256\":\"0x46232cd0eabd0363df51dbe1f67bf49e1c4414bb1a8f0c26a5c95f5ad0513d4b\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/bridges/CCIPBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { ITransferBridge } from \\\"../interfaces/ITransferBridge.sol\\\";\\nimport { IRouterClient } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport { Client } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\n\\ninterface IStaker {\\n  function stake(address beneficiary, uint256 amount) external;\\n\\n  function redeem() external;\\n}\\n\\n/**\\n * @title CCIPBridge\\n * @notice Implementation of the bridge using CCIP Chainlink protocol.\\n */\\ncontract CCIPBridge is AccessControl, ITransferBridge {\\n  using SafeERC20 for IERC20Metadata;\\n\\n  bytes32 public constant CHAIN_ADMIN_ROLE = keccak256(\\\"CHAIN_ADMIN_ROLE\\\");\\n\\n  // Code Adapted following docs in https://docs.chain.link/ccip/tutorials/transfer-tokens-from-contract\\n\\n  // Used when the receiver address is 0 for a given destination chain.\\n  error NoReceiverOnDestinationChain(uint64 destinationChainSelector);\\n\\n  error NoGasLimitOnDestinationChain(uint64 destinationChainSelector); // Used when the gas limit is 0.\\n  error AmountIsZero(); // Used if the amount to transfer is 0.\\n  // Used to make sure contract has enough balance to cover the fees.\\n  error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees);\\n\\n  // Event emitted when a message is sent to another chain.\\n  event MessageSent(\\n    bytes32 indexed messageId, // The unique ID of the CCIP message.\\n    uint64 indexed destinationChainSelector, // The chain selector of the destination chain.\\n    address indexed receiver, // The address of the receiver contract on the destination chain.\\n    address beneficiary, // The beneficiary of the staked tokens on the destination chain.\\n    address token, // The token address that was transferred.\\n    uint256 tokenAmount, // The token amount that was transferred.\\n    address feeToken, // the token address used to pay CCIP fees.\\n    uint256 fees // The fees paid for sending the message.\\n  );\\n\\n  IRouterClient public immutable ccipRouter;\\n  IERC20Metadata public immutable linkToken;\\n  // IERC20Metadata private immutable i_usdcTokena\\n\\n  struct ChainConfig {\\n    address receiver;\\n    uint64 chainSelector;\\n    uint32 gasLimit;\\n  }\\n\\n  mapping(uint64 => ChainConfig) public chains;\\n\\n  error NotImplemented();\\n\\n  constructor(IRouterClient ccipRouter_, IERC20Metadata linkToken_, address admin) {\\n    ccipRouter = ccipRouter_;\\n    linkToken = linkToken_;\\n    _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n  }\\n\\n  function setTargetChain(\\n    uint64 chainId,\\n    uint64 chainSelector,\\n    address receiver,\\n    uint256 gasLimit_\\n  ) external onlyRole(CHAIN_ADMIN_ROLE) {\\n    // To disable a chain send receiver = address(0) and the other values != 0\\n    chains[chainId].receiver = receiver;\\n    chains[chainId].chainSelector = chainSelector;\\n    require(gasLimit_ != 0, NoGasLimitOnDestinationChain(chainId));\\n    require(chainSelector != 0, NoGasLimitOnDestinationChain(chainSelector)); // TODO: correct error\\n    chains[chainId].gasLimit = uint32(gasLimit_); // TODO: safeCast\\n    // TODO emit event\\n  }\\n\\n  /// @notice Construct a CCIP message.\\n  /// @dev This function will create an EVM2AnyMessage struct with all the necessary information for tokens transfer.\\n  /// @param _receiver The address of the receiver.\\n  /// @param _token The token to be transferred.\\n  /// @param _amount The amount of the token to be transferred.\\n  /// @param _feeTokenAddress The address of the token used for fees. Set address(0) for native gas.\\n  /// @return Client.EVM2AnyMessage Returns an EVM2AnyMessage struct which contains information for sending a CCIP message.\\n  function _buildCCIPMessage(\\n    address _receiver,\\n    address _token,\\n    uint256 _amount,\\n    address _feeTokenAddress\\n  ) private pure returns (Client.EVM2AnyMessage memory) {\\n    // Set the token amounts\\n    Client.EVMTokenAmount[] memory tokenAmounts = new Client.EVMTokenAmount[](1);\\n    tokenAmounts[0] = Client.EVMTokenAmount({ token: _token, amount: _amount });\\n\\n    // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\n    return\\n      Client.EVM2AnyMessage({\\n        receiver: abi.encode(_receiver), // ABI-encoded receiver address\\n        data: \\\"\\\", // No data\\n        tokenAmounts: tokenAmounts, // The amount and type of token being transferred\\n        extraArgs: Client._argsToBytes(\\n          // Additional arguments, setting gas limit and allowing out-of-order execution.\\n          // Best Practice: For simplicity, the values are hardcoded. It is advisable to use a more dynamic approach\\n          // where you set the extra arguments off-chain. This allows adaptation depending on the lanes, messages,\\n          // and ensures compatibility with future CCIP upgrades. Read more about it here: https://docs.chain.link/ccip/best-practices#using-extraargs\\n          Client.EVMExtraArgsV2({\\n            gasLimit: 0, // Gas limit for the callback on the destination chain\\n            allowOutOfOrderExecution: true // Allows the message to be executed out of order relative to other messages from the same sender\\n          })\\n        ),\\n        // Set the feeToken to a feeTokenAddress, indicating specific asset will be used for fees\\n        feeToken: _feeTokenAddress\\n      });\\n  }\\n\\n  function transferToken(IERC20Metadata token, uint64 chainId, address target, uint256 amount) external {\\n    ChainConfig storage config = chains[chainId];\\n\\n    require(config.chainSelector != 0, NoReceiverOnDestinationChain(chainId));\\n    // No need to check gas limit since already checked in setTargetChain\\n    if (amount == 0) revert AmountIsZero();\\n\\n    // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\n    Client.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(\\n      target,\\n      address(token),\\n      amount,\\n      address(linkToken)\\n    );\\n\\n    // Get the fee required to send the CCIP message\\n    uint256 fees = ccipRouter.getFee(config.chainSelector, evm2AnyMessage);\\n\\n    if (fees > linkToken.balanceOf(address(this))) revert NotEnoughBalance(linkToken.balanceOf(address(this)), fees);\\n\\n    // approve the Router to transfer LINK tokens on contract's behalf. It will spend the fees in LINK\\n    linkToken.approve(address(ccipRouter), fees);\\n\\n    token.safeTransferFrom(msg.sender, address(this), amount);\\n    // approve the Router to spend usdc tokens on contract's behalf. It will spend the amount of the given token\\n    token.approve(address(ccipRouter), amount);\\n\\n    // Send the message through the router and store the returned message ID\\n    bytes32 messageId = ccipRouter.ccipSend(config.chainSelector, evm2AnyMessage);\\n\\n    // Emit an event with message details\\n    emit MessageSent(\\n      messageId,\\n      config.chainSelector,\\n      target,\\n      target,\\n      address(token),\\n      amount,\\n      address(linkToken),\\n      fees\\n    );\\n  }\\n\\n  function transferTokenAndData(IERC20Metadata, uint64, address, uint256, bytes calldata) external pure {\\n    revert NotImplemented();\\n  }\\n}\\n\",\"keccak256\":\"0x859ac719b1b0194942384bd13d14d862a5e324bca2882f7cd5ac393769c17e5e\",\"license\":\"Apache-2.0\"},\"contracts/bridges/HLCCIPBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IRouterClient } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport { HyperlaneRemoteCallBridge, IInterchainAccountRouter } from \\\"./HyperlaneRemoteCallBridge.sol\\\";\\nimport { CCIPBridge } from \\\"./CCIPBridge.sol\\\";\\n\\ncontract HLCCIPBridge is HyperlaneRemoteCallBridge, CCIPBridge {\\n  constructor(\\n    IRouterClient ccipRouter_,\\n    IERC20Metadata linkToken_,\\n    address admin,\\n    IInterchainAccountRouter _interchainAccountRouter\\n  ) CCIPBridge(ccipRouter_, linkToken_, admin) HyperlaneRemoteCallBridge(_interchainAccountRouter) {}\\n}\\n\",\"keccak256\":\"0xeba4f322994674873adab6cf5daa14aeba4f1767a85406e92ff8c058a7332d88\",\"license\":\"UNLICENSED\"},\"contracts/bridges/HyperlaneRemoteCallBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\nimport { CallLib } from \\\"@hyperlane-xyz/core/contracts/middleware/libs/Call.sol\\\";\\nimport { TypeCasts } from \\\"@hyperlane-xyz/core/contracts/libs/TypeCasts.sol\\\";\\nimport { IRemoteCallBridge } from \\\"../interfaces/IRemoteCallBridge.sol\\\";\\n\\ninterface IInterchainAccountRouter {\\n  function callRemote(uint32 _destinationDomain, CallLib.Call[] calldata calls) external payable returns (bytes32);\\n\\n  function getRemoteInterchainAccount(uint32 _destination, address _owner) external view returns (address);\\n}\\n\\ncontract HyperlaneRemoteCallBridge is IRemoteCallBridge {\\n  IInterchainAccountRouter public interchainAccountRouter;\\n\\n  constructor(IInterchainAccountRouter _interchainAccountRouter) {\\n    interchainAccountRouter = _interchainAccountRouter;\\n  }\\n\\n  function getRemoteInterchainAccount(uint32 _destination) public view returns (address) {\\n    return interchainAccountRouter.getRemoteInterchainAccount(_destination, address(this));\\n  }\\n\\n  function callCrossChain(uint64 chainId, address target, bytes calldata data) external {\\n    // Create a dynamically-sized array with one element\\n    CallLib.Call[] memory callArray = new CallLib.Call[](1);\\n    callArray[0] = CallLib.Call({ to: TypeCasts.addressToBytes32(address(target)), data: data, value: 0 });\\n\\n    interchainAccountRouter.callRemote{ value: 0.01 ether }(\\n      uint32(chainId), // TODO safecast\\n      callArray\\n    );\\n  }\\n\\n  receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb19e3df6366e7573d5c7af555c6fc0ed034b0a8fb5eb369849090ce8202576fa\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRemoteCallBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\ninterface IRemoteCallBridge {\\n  function callCrossChain(uint64 chainId, address target, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xe61a62cb48eaac9224c2c0467b69892390a90e86bfd8b504c7de5b4e7e52754c\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITransferBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface ITransferBridge {\\n  function transferToken(IERC20Metadata token, uint64 chainId, address target, uint256 amount) external;\\n\\n  function transferTokenAndData(\\n    IERC20Metadata token,\\n    uint64 chainId,\\n    address target,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x57accdfe0768846f77ef2e16f01c7f1837b1da96b6ab373858ae001b5ef82d45\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516118a63803806118a683398101604081905261002f91610123565b600080546001600160a01b0319166001600160a01b03838116919091178255858116608052841660a0528490849084906100699082610076565b5050505050505050610182565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff166101015760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a4506001610105565b5060005b92915050565b6001600160a01b038116811461012057600080fd5b50565b6000806000806080858703121561013957600080fd5b84516101448161010b565b60208601519094506101558161010b565b60408601519093506101668161010b565b60608601519092506101778161010b565b939692955090935050565b60805160a0516116c06101e6600039600081816102760152818161084401528181610926015281816109b501528181610a920152610c730152600081816101970152818161087f01528181610a6301528181610b2c0152610bbd01526116c06000f3fe6080604052600436106101025760003560e01c80636d7fd8fa11610095578063a717a78e11610064578063a717a78e1461030d578063a9d59e3a1461032d578063ada8bcdc1461034d578063b093aee3146103d6578063d547741f146103f657600080fd5b80636d7fd8fa146102985780636db05be5146102b857806391d14854146102d8578063a217fddf146102f857600080fd5b80632f2ff15d116100d15780632f2ff15d1461020257806336568abe146102245780634ac4ff2b1461024457806357970e931461026457600080fd5b806301ffc9a71461010e57806306170b8c146101435780630de2298414610185578063248a9ca3146101d157600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b5061012e6101293660046111be565b610416565b60405190151581526020015b60405180910390f35b34801561014f57600080fd5b506101777f155b0871cca71c816fdac5e9acada123aa1eed80c9435d654112f5669ea6ec2a81565b60405190815260200161013a565b34801561019157600080fd5b506101b97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161013a565b3480156101dd57600080fd5b506101776101ec3660046111e8565b6000908152600160208190526040909120015490565b34801561020e57600080fd5b5061022261021d366004611216565b61044d565b005b34801561023057600080fd5b5061022261023f366004611216565b610479565b34801561025057600080fd5b5061022261025f3660046112aa565b6104b1565b34801561027057600080fd5b506101b97f000000000000000000000000000000000000000000000000000000000000000081565b3480156102a457600080fd5b506102226102b336600461130c565b6105fa565b3480156102c457600080fd5b506101b96102d3366004611359565b61070b565b3480156102e457600080fd5b5061012e6102f3366004611216565b610784565b34801561030457600080fd5b50610177600081565b34801561031957600080fd5b5061022261032836600461137f565b6107af565b34801561033957600080fd5b506000546101b9906001600160a01b031681565b34801561035957600080fd5b506103a3610368366004611401565b6002602052600090815260409020546001600160a01b03811690600160a01b81046001600160401b031690600160e01b900463ffffffff1683565b604080516001600160a01b0390941684526001600160401b03909216602084015263ffffffff169082015260600161013a565b3480156103e257600080fd5b506102226103f136600461141c565b6107c8565b34801561040257600080fd5b50610222610411366004611216565b610cee565b60006001600160e01b03198216637965db0b60e01b148061044757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152600160208190526040909120015461046981610d14565b6104738383610d21565b50505050565b6001600160a01b03811633146104a25760405163334bd91960e11b815260040160405180910390fd5b6104ac8282610d9a565b505050565b604080516001808252818301909252600091816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816104c85790505090506040518060600160405280610514866001600160a01b031690565b81526020016000815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505083518492506105695761056961143d565b602090810291909101015260005460405163dd91cc8760e01b81526001600160a01b039091169063dd91cc8790662386f26fc10000906105af90899086906004016114a3565b60206040518083038185885af11580156105cd573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906105f29190611536565b505050505050565b7f155b0871cca71c816fdac5e9acada123aa1eed80c9435d654112f5669ea6ec2a61062481610d14565b6001600160401b0380861660009081526002602052604090208054918616600160a01b026001600160e01b03199092166001600160a01b0386161791909117905584826106955760405163b638ee9f60e01b81526001600160401b0390911660048201526024015b60405180910390fd5b50836001600160401b0381166106ca5760405163b638ee9f60e01b81526001600160401b03909116600482015260240161068c565b50506001600160401b039093166000908152600260205260409020805463ffffffff909416600160e01b026001600160e01b03909416939093179092555050565b60008054604051630e25828560e01b815263ffffffff841660048201523060248201526001600160a01b0390911690630e25828590604401602060405180830381865afa158015610760573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610447919061154f565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60405163d623472560e01b815260040160405180910390fd5b6001600160401b038084166000908152600260205260409020805490918591600160a01b900416610818576040516367a1bf1d60e01b81526001600160401b03909116600482015260240161068c565b508160000361083a576040516310eb483f60e21b815260040160405180910390fd5b60006108688487857f0000000000000000000000000000000000000000000000000000000000000000610e07565b82546040516320487ded60e01b81529192506000917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316916320487ded916108cd91600160a01b90046001600160401b031690869060040161156c565b602060405180830381865afa1580156108ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090e9190611536565b6040516370a0823160e01b81523060048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610975573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109999190611536565b811115610a4c576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a289190611536565b604051634787a10360e11b815260048101919091526024810182905260440161068c565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af1158015610adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aff919061164c565b50610b156001600160a01b038816333087610f8d565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820186905288169063095ea7b3906044016020604051808303816000875af1158015610b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba8919061164c565b5082546040516396f4e9f960e01b81526000917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316916396f4e9f991610c0c91600160a01b9091046001600160401b031690879060040161156c565b6020604051808303816000875af1158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f9190611536565b8454604080516001600160a01b038a81168083528d821660208401529282018a90527f00000000000000000000000000000000000000000000000000000000000000001660608201526080810186905292935091600160a01b9091046001600160401b03169083907f80f8e2b9197752b9e33afaa4f92703ac7efbbf247cddcc732b1b555ff1dea27b9060a00160405180910390a45050505050505050565b60008281526001602081905260409091200154610d0a81610d14565b6104738383610d9a565b610d1e8133610fe7565b50565b6000610d2d8383610784565b610d925760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a4506001610447565b506000610447565b6000610da68383610784565b15610d925760008381526001602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610447565b610e426040518060a0016040528060608152602001606081526020016060815260200160006001600160a01b03168152602001606081525090565b604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610e595790505090506040518060400160405280866001600160a01b031681526020018581525081600081518110610eb357610eb361143d565b60209081029190910101526040805160a081019091526001600160a01b03871660c08201528060e081016040516020818303038152906040528152602001604051806020016040528060008152508152602001828152602001846001600160a01b03168152602001610f81604051806040016040528060008152602001600115158152506040805182516024820152602092830151151560448083019190915282518083039091018152606490910190915290810180516001600160e01b0316630181dcf160e41b17905290565b90529695505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610473908590611024565b610ff18282610784565b6110205760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161068c565b5050565b60006110396001600160a01b03841683611087565b9050805160001415801561105e57508080602001905181019061105c919061164c565b155b156104ac57604051635274afe760e01b81526001600160a01b038416600482015260240161068c565b60606110958383600061109c565b9392505050565b6060814710156110c15760405163cd78605960e01b815230600482015260240161068c565b600080856001600160a01b031684866040516110dd919061166e565b60006040518083038185875af1925050503d806000811461111a576040519150601f19603f3d011682016040523d82523d6000602084013e61111f565b606091505b509150915061112f868383611139565b9695505050505050565b60608261114e5761114982611195565b611095565b815115801561116557506001600160a01b0384163b155b1561118e57604051639996b31560e01b81526001600160a01b038516600482015260240161068c565b5080611095565b8051156111a55780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000602082840312156111d057600080fd5b81356001600160e01b03198116811461109557600080fd5b6000602082840312156111fa57600080fd5b5035919050565b6001600160a01b0381168114610d1e57600080fd5b6000806040838503121561122957600080fd5b82359150602083013561123b81611201565b809150509250929050565b80356001600160401b038116811461125d57600080fd5b919050565b60008083601f84011261127457600080fd5b5081356001600160401b0381111561128b57600080fd5b6020830191508360208285010111156112a357600080fd5b9250929050565b600080600080606085870312156112c057600080fd5b6112c985611246565b935060208501356112d981611201565b925060408501356001600160401b038111156112f457600080fd5b61130087828801611262565b95989497509550505050565b6000806000806080858703121561132257600080fd5b61132b85611246565b935061133960208601611246565b9250604085013561134981611201565b9396929550929360600135925050565b60006020828403121561136b57600080fd5b813563ffffffff8116811461109557600080fd5b60008060008060008060a0878903121561139857600080fd5b86356113a381611201565b95506113b160208801611246565b945060408701356113c181611201565b93506060870135925060808701356001600160401b038111156113e357600080fd5b6113ef89828a01611262565b979a9699509497509295939492505050565b60006020828403121561141357600080fd5b61109582611246565b6000806000806080858703121561143257600080fd5b843561132b81611201565b634e487b7160e01b600052603260045260246000fd5b60005b8381101561146e578181015183820152602001611456565b50506000910152565b6000815180845261148f816020860160208601611453565b601f01601f19169290920160200192915050565b60006040820163ffffffff851683526040602084015280845180835260608501915060608160051b86010192506020860160005b8281101561152957605f198786030184528151805186526020810151602087015260408101519050606060408701526115136060870182611477565b95505060209384019391909101906001016114d7565b5092979650505050505050565b60006020828403121561154857600080fd5b5051919050565b60006020828403121561156157600080fd5b815161109581611201565b6001600160401b0383168152604060208201526000825160a0604084015261159760e0840182611477565b90506020840151603f198483030160608501526115b48282611477565b6040860151858203603f19016080870152805180835260209182019450600093509101905b8083101561161057835180516001600160a01b031683526020908101518184015290930192600192909201916040909101906115d9565b5060608601516001600160a01b031660a08601526080860151858203603f190160c087015292506116418184611477565b979650505050505050565b60006020828403121561165e57600080fd5b8151801515811461109557600080fd5b60008251611680818460208701611453565b919091019291505056fea2646970667358221220f0a19435c2b6e80179c3d4658a2623d89e9139741f4f5035b84e048fecd4a4f064736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436106101025760003560e01c80636d7fd8fa11610095578063a717a78e11610064578063a717a78e1461030d578063a9d59e3a1461032d578063ada8bcdc1461034d578063b093aee3146103d6578063d547741f146103f657600080fd5b80636d7fd8fa146102985780636db05be5146102b857806391d14854146102d8578063a217fddf146102f857600080fd5b80632f2ff15d116100d15780632f2ff15d1461020257806336568abe146102245780634ac4ff2b1461024457806357970e931461026457600080fd5b806301ffc9a71461010e57806306170b8c146101435780630de2298414610185578063248a9ca3146101d157600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b5061012e6101293660046111be565b610416565b60405190151581526020015b60405180910390f35b34801561014f57600080fd5b506101777f155b0871cca71c816fdac5e9acada123aa1eed80c9435d654112f5669ea6ec2a81565b60405190815260200161013a565b34801561019157600080fd5b506101b97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161013a565b3480156101dd57600080fd5b506101776101ec3660046111e8565b6000908152600160208190526040909120015490565b34801561020e57600080fd5b5061022261021d366004611216565b61044d565b005b34801561023057600080fd5b5061022261023f366004611216565b610479565b34801561025057600080fd5b5061022261025f3660046112aa565b6104b1565b34801561027057600080fd5b506101b97f000000000000000000000000000000000000000000000000000000000000000081565b3480156102a457600080fd5b506102226102b336600461130c565b6105fa565b3480156102c457600080fd5b506101b96102d3366004611359565b61070b565b3480156102e457600080fd5b5061012e6102f3366004611216565b610784565b34801561030457600080fd5b50610177600081565b34801561031957600080fd5b5061022261032836600461137f565b6107af565b34801561033957600080fd5b506000546101b9906001600160a01b031681565b34801561035957600080fd5b506103a3610368366004611401565b6002602052600090815260409020546001600160a01b03811690600160a01b81046001600160401b031690600160e01b900463ffffffff1683565b604080516001600160a01b0390941684526001600160401b03909216602084015263ffffffff169082015260600161013a565b3480156103e257600080fd5b506102226103f136600461141c565b6107c8565b34801561040257600080fd5b50610222610411366004611216565b610cee565b60006001600160e01b03198216637965db0b60e01b148061044757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152600160208190526040909120015461046981610d14565b6104738383610d21565b50505050565b6001600160a01b03811633146104a25760405163334bd91960e11b815260040160405180910390fd5b6104ac8282610d9a565b505050565b604080516001808252818301909252600091816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816104c85790505090506040518060600160405280610514866001600160a01b031690565b81526020016000815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505083518492506105695761056961143d565b602090810291909101015260005460405163dd91cc8760e01b81526001600160a01b039091169063dd91cc8790662386f26fc10000906105af90899086906004016114a3565b60206040518083038185885af11580156105cd573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906105f29190611536565b505050505050565b7f155b0871cca71c816fdac5e9acada123aa1eed80c9435d654112f5669ea6ec2a61062481610d14565b6001600160401b0380861660009081526002602052604090208054918616600160a01b026001600160e01b03199092166001600160a01b0386161791909117905584826106955760405163b638ee9f60e01b81526001600160401b0390911660048201526024015b60405180910390fd5b50836001600160401b0381166106ca5760405163b638ee9f60e01b81526001600160401b03909116600482015260240161068c565b50506001600160401b039093166000908152600260205260409020805463ffffffff909416600160e01b026001600160e01b03909416939093179092555050565b60008054604051630e25828560e01b815263ffffffff841660048201523060248201526001600160a01b0390911690630e25828590604401602060405180830381865afa158015610760573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610447919061154f565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60405163d623472560e01b815260040160405180910390fd5b6001600160401b038084166000908152600260205260409020805490918591600160a01b900416610818576040516367a1bf1d60e01b81526001600160401b03909116600482015260240161068c565b508160000361083a576040516310eb483f60e21b815260040160405180910390fd5b60006108688487857f0000000000000000000000000000000000000000000000000000000000000000610e07565b82546040516320487ded60e01b81529192506000917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316916320487ded916108cd91600160a01b90046001600160401b031690869060040161156c565b602060405180830381865afa1580156108ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090e9190611536565b6040516370a0823160e01b81523060048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610975573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109999190611536565b811115610a4c576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a289190611536565b604051634787a10360e11b815260048101919091526024810182905260440161068c565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af1158015610adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aff919061164c565b50610b156001600160a01b038816333087610f8d565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820186905288169063095ea7b3906044016020604051808303816000875af1158015610b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba8919061164c565b5082546040516396f4e9f960e01b81526000917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316916396f4e9f991610c0c91600160a01b9091046001600160401b031690879060040161156c565b6020604051808303816000875af1158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f9190611536565b8454604080516001600160a01b038a81168083528d821660208401529282018a90527f00000000000000000000000000000000000000000000000000000000000000001660608201526080810186905292935091600160a01b9091046001600160401b03169083907f80f8e2b9197752b9e33afaa4f92703ac7efbbf247cddcc732b1b555ff1dea27b9060a00160405180910390a45050505050505050565b60008281526001602081905260409091200154610d0a81610d14565b6104738383610d9a565b610d1e8133610fe7565b50565b6000610d2d8383610784565b610d925760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a4506001610447565b506000610447565b6000610da68383610784565b15610d925760008381526001602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610447565b610e426040518060a0016040528060608152602001606081526020016060815260200160006001600160a01b03168152602001606081525090565b604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610e595790505090506040518060400160405280866001600160a01b031681526020018581525081600081518110610eb357610eb361143d565b60209081029190910101526040805160a081019091526001600160a01b03871660c08201528060e081016040516020818303038152906040528152602001604051806020016040528060008152508152602001828152602001846001600160a01b03168152602001610f81604051806040016040528060008152602001600115158152506040805182516024820152602092830151151560448083019190915282518083039091018152606490910190915290810180516001600160e01b0316630181dcf160e41b17905290565b90529695505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610473908590611024565b610ff18282610784565b6110205760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161068c565b5050565b60006110396001600160a01b03841683611087565b9050805160001415801561105e57508080602001905181019061105c919061164c565b155b156104ac57604051635274afe760e01b81526001600160a01b038416600482015260240161068c565b60606110958383600061109c565b9392505050565b6060814710156110c15760405163cd78605960e01b815230600482015260240161068c565b600080856001600160a01b031684866040516110dd919061166e565b60006040518083038185875af1925050503d806000811461111a576040519150601f19603f3d011682016040523d82523d6000602084013e61111f565b606091505b509150915061112f868383611139565b9695505050505050565b60608261114e5761114982611195565b611095565b815115801561116557506001600160a01b0384163b155b1561118e57604051639996b31560e01b81526001600160a01b038516600482015260240161068c565b5080611095565b8051156111a55780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000602082840312156111d057600080fd5b81356001600160e01b03198116811461109557600080fd5b6000602082840312156111fa57600080fd5b5035919050565b6001600160a01b0381168114610d1e57600080fd5b6000806040838503121561122957600080fd5b82359150602083013561123b81611201565b809150509250929050565b80356001600160401b038116811461125d57600080fd5b919050565b60008083601f84011261127457600080fd5b5081356001600160401b0381111561128b57600080fd5b6020830191508360208285010111156112a357600080fd5b9250929050565b600080600080606085870312156112c057600080fd5b6112c985611246565b935060208501356112d981611201565b925060408501356001600160401b038111156112f457600080fd5b61130087828801611262565b95989497509550505050565b6000806000806080858703121561132257600080fd5b61132b85611246565b935061133960208601611246565b9250604085013561134981611201565b9396929550929360600135925050565b60006020828403121561136b57600080fd5b813563ffffffff8116811461109557600080fd5b60008060008060008060a0878903121561139857600080fd5b86356113a381611201565b95506113b160208801611246565b945060408701356113c181611201565b93506060870135925060808701356001600160401b038111156113e357600080fd5b6113ef89828a01611262565b979a9699509497509295939492505050565b60006020828403121561141357600080fd5b61109582611246565b6000806000806080858703121561143257600080fd5b843561132b81611201565b634e487b7160e01b600052603260045260246000fd5b60005b8381101561146e578181015183820152602001611456565b50506000910152565b6000815180845261148f816020860160208601611453565b601f01601f19169290920160200192915050565b60006040820163ffffffff851683526040602084015280845180835260608501915060608160051b86010192506020860160005b8281101561152957605f198786030184528151805186526020810151602087015260408101519050606060408701526115136060870182611477565b95505060209384019391909101906001016114d7565b5092979650505050505050565b60006020828403121561154857600080fd5b5051919050565b60006020828403121561156157600080fd5b815161109581611201565b6001600160401b0383168152604060208201526000825160a0604084015261159760e0840182611477565b90506020840151603f198483030160608501526115b48282611477565b6040860151858203603f19016080870152805180835260209182019450600093509101905b8083101561161057835180516001600160a01b031683526020908101518184015290930192600192909201916040909101906115d9565b5060608601516001600160a01b031660a08601526080860151858203603f190160c087015292506116418184611477565b979650505050505050565b60006020828403121561165e57600080fd5b8151801515811461109557600080fd5b60008251611680818460208701611453565b919091019291505056fea2646970667358221220f0a19435c2b6e80179c3d4658a2623d89e9139741f4f5035b84e048fecd4a4f064736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11375,
        "contract": "contracts/bridges/HLCCIPBridge.sol:HLCCIPBridge",
        "label": "interchainAccountRouter",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IInterchainAccountRouter)11370"
      },
      {
        "astId": 4361,
        "contract": "contracts/bridges/HLCCIPBridge.sol:HLCCIPBridge",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4356_storage)"
      },
      {
        "astId": 10997,
        "contract": "contracts/bridges/HLCCIPBridge.sol:HLCCIPBridge",
        "label": "chains",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint64,t_struct(ChainConfig)10992_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IInterchainAccountRouter)11370": {
        "encoding": "inplace",
        "label": "contract IInterchainAccountRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4356_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4356_storage"
      },
      "t_mapping(t_uint64,t_struct(ChainConfig)10992_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct CCIPBridge.ChainConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(ChainConfig)10992_storage"
      },
      "t_struct(ChainConfig)10992_storage": {
        "encoding": "inplace",
        "label": "struct CCIPBridge.ChainConfig",
        "members": [
          {
            "astId": 10987,
            "contract": "contracts/bridges/HLCCIPBridge.sol:HLCCIPBridge",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10989,
            "contract": "contracts/bridges/HLCCIPBridge.sol:HLCCIPBridge",
            "label": "chainSelector",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 10991,
            "contract": "contracts/bridges/HLCCIPBridge.sol:HLCCIPBridge",
            "label": "gasLimit",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)4356_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4353,
            "contract": "contracts/bridges/HLCCIPBridge.sol:HLCCIPBridge",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4355,
            "contract": "contracts/bridges/HLCCIPBridge.sol:HLCCIPBridge",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}